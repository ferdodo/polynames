var yn=Object.defineProperty;var wn=(r,e,t)=>e in r?yn(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var Y=(r,e,t)=>wn(r,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function t(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerPolicy&&(o.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?o.credentials="include":i.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(i){if(i.ep)return;i.ep=!0;const o=t(i);fetch(i.href,o)}})();var re=(r=>(r.Target="Target",r.Neutral="Neutral",r.Eliminatory="Eliminatory",r))(re||{}),F=(r=>(r.Available="Available",r.IntuitionMasterTurn="IntuitionMasterTurn",r.WordMasterTurn="WordMasterTurn",r.Finished="Finished",r))(F||{}),B=(r=>(r.IntuitionMaster="IntuitionMaster",r.WordMaster="WordMaster",r))(B||{});Object.values(re);function hr(r,e){var i,o,a,s;if(e.length===0)return F.Available;if(r.length===0)return F.WordMasterTurn;const t=r.sort((u,l)=>u.position-l.position).findLast(Boolean);return(i=t==null?void 0:t.cards)!=null&&i.length?r.flatMap(u=>u.cards||[]).filter(u=>u.kind===re.Target).length>=8||(o=t==null?void 0:t.cards)!=null&&o.some(u=>u.kind===re.Eliminatory)?F.Finished:(a=t==null?void 0:t.cards)!=null&&a.some(u=>u.kind===re.Neutral)||((s=t==null?void 0:t.cards)==null?void 0:s.length)>t.count?F.WordMasterTurn:F.IntuitionMasterTurn:F.IntuitionMasterTurn}var It=256;for(;It--;)(It+256).toString(16).substring(1);var Ke=function(r,e){return Ke=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])},Ke(r,e)};function be(r,e){if(typeof e!="function"&&e!==null)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");Ke(r,e);function t(){this.constructor=r}r.prototype=e===null?Object.create(e):(t.prototype=e.prototype,new t)}function et(r){var e=typeof Symbol=="function"&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function tt(r,e){var t=typeof Symbol=="function"&&r[Symbol.iterator];if(!t)return r;var n=t.call(r),i,o=[],a;try{for(;(e===void 0||e-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(a)throw a.error}}return o}function rt(r,e,t){if(t||arguments.length===2)for(var n=0,i=e.length,o;n<i;n++)(o||!(n in e))&&(o||(o=Array.prototype.slice.call(e,0,n)),o[n]=e[n]);return r.concat(o||Array.prototype.slice.call(e))}function L(r){return typeof r=="function"}function gt(r){var e=function(n){Error.call(n),n.stack=new Error().stack},t=r(e);return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var Ue=gt(function(r){return function(t){r(this),this.message=t?t.length+` errors occurred during unsubscription:
`+t.map(function(n,i){return i+1+") "+n.toString()}).join(`
  `):"",this.name="UnsubscriptionError",this.errors=t}});function nt(r,e){if(r){var t=r.indexOf(e);0<=t&&r.splice(t,1)}}var Me=function(){function r(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return r.prototype.unsubscribe=function(){var e,t,n,i,o;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var s=et(a),u=s.next();!u.done;u=s.next()){var l=u.value;l.remove(this)}}catch(h){e={error:h}}finally{try{u&&!u.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else a.remove(this);var f=this.initialTeardown;if(L(f))try{f()}catch(h){o=h instanceof Ue?h.errors:[h]}var c=this._finalizers;if(c){this._finalizers=null;try{for(var d=et(c),p=d.next();!p.done;p=d.next()){var m=p.value;try{jt(m)}catch(h){o=o??[],h instanceof Ue?o=rt(rt([],tt(o)),tt(h.errors)):o.push(h)}}}catch(h){n={error:h}}finally{try{p&&!p.done&&(i=d.return)&&i.call(d)}finally{if(n)throw n.error}}}if(o)throw new Ue(o)}},r.prototype.add=function(e){var t;if(e&&e!==this)if(this.closed)jt(e);else{if(e instanceof r){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=(t=this._finalizers)!==null&&t!==void 0?t:[]).push(e)}},r.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},r.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},r.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&nt(t,e)},r.prototype.remove=function(e){var t=this._finalizers;t&&nt(t,e),e instanceof r&&e._removeParent(this)},r.EMPTY=function(){var e=new r;return e.closed=!0,e}(),r}(),mr=Me.EMPTY;function br(r){return r instanceof Me||r&&"closed"in r&&L(r.remove)&&L(r.add)&&L(r.unsubscribe)}function jt(r){L(r)?r():r.unsubscribe()}var vr={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},gr={setTimeout:function(r,e){for(var t=[],n=2;n<arguments.length;n++)t[n-2]=arguments[n];return setTimeout.apply(void 0,rt([r,e],tt(t)))},clearTimeout:function(r){var e=gr.delegate;return((e==null?void 0:e.clearTimeout)||clearTimeout)(r)},delegate:void 0};function _n(r){gr.setTimeout(function(){throw r})}function Nt(){}function Se(r){r()}var yt=function(r){be(e,r);function e(t){var n=r.call(this)||this;return n.isStopped=!1,t?(n.destination=t,br(t)&&t.add(n)):n.destination=Sn,n}return e.create=function(t,n,i){return new Pe(t,n,i)},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,r.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(Me),xn=Function.prototype.bind;function Ve(r,e){return xn.call(r,e)}var kn=function(){function r(e){this.partialObserver=e}return r.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(n){_e(n)}},r.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(n){_e(n)}else _e(e)},r.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(t){_e(t)}},r}(),Pe=function(r){be(e,r);function e(t,n,i){var o=r.call(this)||this,a;if(L(t)||!t)a={next:t??void 0,error:n??void 0,complete:i??void 0};else{var s;o&&vr.useDeprecatedNextContext?(s=Object.create(t),s.unsubscribe=function(){return o.unsubscribe()},a={next:t.next&&Ve(t.next,s),error:t.error&&Ve(t.error,s),complete:t.complete&&Ve(t.complete,s)}):a=t}return o.destination=new kn(a),o}return e}(yt);function _e(r){_n(r)}function En(r){throw r}var Sn={closed:!0,next:Nt,error:En,complete:Nt},An=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}();function Fn(r){return r}function $n(r){return r.length===0?Fn:r.length===1?r[0]:function(t){return r.reduce(function(n,i){return i(n)},t)}}var Rt=function(){function r(e){e&&(this._subscribe=e)}return r.prototype.lift=function(e){var t=new r;return t.source=this,t.operator=e,t},r.prototype.subscribe=function(e,t,n){var i=this,o=Pn(e)?e:new Pe(e,t,n);return Se(function(){var a=i,s=a.operator,u=a.source;o.add(s?s.call(o,u):u?i._subscribe(o):i._trySubscribe(o))}),o},r.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},r.prototype.forEach=function(e,t){var n=this;return t=Zt(t),new t(function(i,o){var a=new Pe({next:function(s){try{e(s)}catch(u){o(u),a.unsubscribe()}},error:o,complete:i});n.subscribe(a)})},r.prototype._subscribe=function(e){var t;return(t=this.source)===null||t===void 0?void 0:t.subscribe(e)},r.prototype[An]=function(){return this},r.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return $n(e)(this)},r.prototype.toPromise=function(e){var t=this;return e=Zt(e),new e(function(n,i){var o;t.subscribe(function(a){return o=a},function(a){return i(a)},function(){return n(o)})})},r.create=function(e){return new r(e)},r}();function Zt(r){var e;return(e=r??vr.Promise)!==null&&e!==void 0?e:Promise}function Cn(r){return r&&L(r.next)&&L(r.error)&&L(r.complete)}function Pn(r){return r&&r instanceof yt||Cn(r)&&br(r)}function On(r){return L(r==null?void 0:r.lift)}function yr(r){return function(e){if(On(e))return e.lift(function(t){try{return r(t,this)}catch(n){this.error(n)}});throw new TypeError("Unable to lift unknown Observable type")}}function wr(r,e,t,n,i){return new zn(r,e,t,n,i)}var zn=function(r){be(e,r);function e(t,n,i,o,a,s){var u=r.call(this,t)||this;return u.onFinalize=a,u.shouldUnsubscribe=s,u._next=n?function(l){try{n(l)}catch(f){t.error(f)}}:r.prototype._next,u._error=o?function(l){try{o(l)}catch(f){t.error(f)}finally{this.unsubscribe()}}:r.prototype._error,u._complete=i?function(){try{i()}catch(l){t.error(l)}finally{this.unsubscribe()}}:r.prototype._complete,u}return e.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;r.prototype.unsubscribe.call(this),!n&&((t=this.onFinalize)===null||t===void 0||t.call(this))}},e}(yt),Tn=gt(function(r){return function(){r(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}),_r=function(r){be(e,r);function e(){var t=r.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return e.prototype.lift=function(t){var n=new Lt(this,this);return n.operator=t,n},e.prototype._throwIfClosed=function(){if(this.closed)throw new Tn},e.prototype.next=function(t){var n=this;Se(function(){var i,o;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var a=et(n.currentObservers),s=a.next();!s.done;s=a.next()){var u=s.value;u.next(t)}}catch(l){i={error:l}}finally{try{s&&!s.done&&(o=a.return)&&o.call(a)}finally{if(i)throw i.error}}}})},e.prototype.error=function(t){var n=this;Se(function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=t;for(var i=n.observers;i.length;)i.shift().error(t)}})},e.prototype.complete=function(){var t=this;Se(function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var n=t.observers;n.length;)n.shift().complete()}})},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return((t=this.observers)===null||t===void 0?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(t){return this._throwIfClosed(),r.prototype._trySubscribe.call(this,t)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var n=this,i=this,o=i.hasError,a=i.isStopped,s=i.observers;return o||a?mr:(this.currentObservers=null,s.push(t),new Me(function(){n.currentObservers=null,nt(s,t)}))},e.prototype._checkFinalizedStatuses=function(t){var n=this,i=n.hasError,o=n.thrownError,a=n.isStopped;i?t.error(o):a&&t.complete()},e.prototype.asObservable=function(){var t=new Rt;return t.source=this,t},e.create=function(t,n){return new Lt(t,n)},e}(Rt),Lt=function(r){be(e,r);function e(t,n){var i=r.call(this)||this;return i.destination=t,i.source=n,i}return e.prototype.next=function(t){var n,i;(i=(n=this.destination)===null||n===void 0?void 0:n.next)===null||i===void 0||i.call(n,t)},e.prototype.error=function(t){var n,i;(i=(n=this.destination)===null||n===void 0?void 0:n.error)===null||i===void 0||i.call(n,t)},e.prototype.complete=function(){var t,n;(n=(t=this.destination)===null||t===void 0?void 0:t.complete)===null||n===void 0||n.call(t)},e.prototype._subscribe=function(t){var n,i;return(i=(n=this.source)===null||n===void 0?void 0:n.subscribe(t))!==null&&i!==void 0?i:mr},e}(_r),Mn=gt(function(r){return function(){r(this),this.name="EmptyError",this.message="no elements in sequence"}});function In(r,e){var t=typeof e=="object";return new Promise(function(n,i){var o=new Pe({next:function(a){n(a),o.unsubscribe()},error:i,complete:function(){t?n(e.defaultValue):i(new Mn)}});r.subscribe(o)})}function xr(r,e){return yr(function(t,n){var i=0;t.subscribe(wr(n,function(o){n.next(r.call(e,o,i++))}))})}function kr(r,e){return yr(function(t,n){var i=0;t.subscribe(wr(n,function(o){return r.call(e,o,i++)&&n.next(o)}))})}function jn(r,e){const t=r.connection.messages$.pipe(xr(i=>i.joinGameResponse),kr(Boolean)),n=In(t,{defaultValue:{}}).catch(i=>{throw new Error("Failed to join game !",{cause:i})});return r.connection.send({joinGameRequest:{game:e}}),n}function Nn(r,e,t,n,i){r.connection.send({giveHintRequest:{hint:e,count:t,signature:n,game:i}})}function Rn(r,e,t,n){r.connection.send({handGuessRequest:{game:e,cards:t,signature:n}})}function Zn(r){return r.connection.messages$.pipe(xr(e=>e.broadcastGame),kr(Boolean))}function Ln(){let r={signature:void 0,role:void 0};const e=new _r;return{read(){return{...r}},save(t){r={...r,...t},e.next(r)},observe(){return e.asObservable()}}}var Ie,k,Er,J,qt,Sr,ot,wt,it,at,Ar,fe={},Fr=[],qn=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,_t=Array.isArray;function W(r,e){for(var t in e)r[t]=e[t];return r}function $r(r){var e=r.parentNode;e&&e.removeChild(r)}function Cr(r,e,t){var n,i,o,a={};for(o in e)o=="key"?n=e[o]:o=="ref"?i=e[o]:a[o]=e[o];if(arguments.length>2&&(a.children=arguments.length>3?Ie.call(arguments,2):t),typeof r=="function"&&r.defaultProps!=null)for(o in r.defaultProps)a[o]===void 0&&(a[o]=r.defaultProps[o]);return Ae(r,a,n,i,null)}function Ae(r,e,t,n,i){var o={type:r,props:e,key:t,ref:n,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:i??++Er,__i:-1,__u:0};return i==null&&k.vnode!=null&&k.vnode(o),o}function je(r){return r.children}function Fe(r,e){this.props=r,this.context=e}function Q(r,e){if(e==null)return r.__?Q(r.__,r.__i+1):null;for(var t;e<r.__k.length;e++)if((t=r.__k[e])!=null&&t.__e!=null)return t.__e;return typeof r.type=="function"?Q(r):null}function Pr(r){var e,t;if((r=r.__)!=null&&r.__c!=null){for(r.__e=r.__c.base=null,e=0;e<r.__k.length;e++)if((t=r.__k[e])!=null&&t.__e!=null){r.__e=r.__c.base=t.__e;break}return Pr(r)}}function st(r){(!r.__d&&(r.__d=!0)&&J.push(r)&&!Oe.__r++||qt!==k.debounceRendering)&&((qt=k.debounceRendering)||Sr)(Oe)}function Oe(){var r,e,t,n,i,o,a,s;for(J.sort(ot);r=J.shift();)r.__d&&(e=J.length,n=void 0,o=(i=(t=r).__v).__e,a=[],s=[],t.__P&&((n=W({},i)).__v=i.__v+1,k.vnode&&k.vnode(n),xt(t.__P,n,i,t.__n,t.__P.namespaceURI,32&i.__u?[o]:null,a,o??Q(i),!!(32&i.__u),s),n.__v=i.__v,n.__.__k[n.__i]=n,Tr(a,n,s),n.__e!=o&&Pr(n)),J.length>e&&J.sort(ot));Oe.__r=0}function Or(r,e,t,n,i,o,a,s,u,l,f){var c,d,p,m,h,y=n&&n.__k||Fr,g=e.length;for(t.__d=u,Dn(t,e,y),u=t.__d,c=0;c<g;c++)(p=t.__k[c])!=null&&typeof p!="boolean"&&typeof p!="function"&&(d=p.__i===-1?fe:y[p.__i]||fe,p.__i=c,xt(r,p,d,i,o,a,s,u,l,f),m=p.__e,p.ref&&d.ref!=p.ref&&(d.ref&&kt(d.ref,null,p),f.push(p.ref,p.__c||m,p)),h==null&&m!=null&&(h=m),65536&p.__u||d.__k===p.__k?(u&&typeof p.type=="string"&&!r.contains(u)&&(u=Q(d)),u=zr(p,u,r)):typeof p.type=="function"&&p.__d!==void 0?u=p.__d:m&&(u=m.nextSibling),p.__d=void 0,p.__u&=-196609);t.__d=u,t.__e=h}function Dn(r,e,t){var n,i,o,a,s,u=e.length,l=t.length,f=l,c=0;for(r.__k=[],n=0;n<u;n++)a=n+c,(i=r.__k[n]=(i=e[n])==null||typeof i=="boolean"||typeof i=="function"?null:typeof i=="string"||typeof i=="number"||typeof i=="bigint"||i.constructor==String?Ae(null,i,null,null,null):_t(i)?Ae(je,{children:i},null,null,null):i.constructor===void 0&&i.__b>0?Ae(i.type,i.props,i.key,i.ref?i.ref:null,i.__v):i)!=null?(i.__=r,i.__b=r.__b+1,s=Un(i,t,a,f),i.__i=s,o=null,s!==-1&&(f--,(o=t[s])&&(o.__u|=131072)),o==null||o.__v===null?(s==-1&&c--,typeof i.type!="function"&&(i.__u|=65536)):s!==a&&(s==a-1?c=s-a:s==a+1?c++:s>a?f>u-a?c+=s-a:c--:s<a&&c++,s!==n+c&&(i.__u|=65536))):(o=t[a])&&o.key==null&&o.__e&&!(131072&o.__u)&&(o.__e==r.__d&&(r.__d=Q(o)),ut(o,o,!1),t[a]=null,f--);if(f)for(n=0;n<l;n++)(o=t[n])!=null&&!(131072&o.__u)&&(o.__e==r.__d&&(r.__d=Q(o)),ut(o,o))}function zr(r,e,t){var n,i;if(typeof r.type=="function"){for(n=r.__k,i=0;n&&i<n.length;i++)n[i]&&(n[i].__=r,e=zr(n[i],e,t));return e}r.__e!=e&&(t.insertBefore(r.__e,e||null),e=r.__e);do e=e&&e.nextSibling;while(e!=null&&e.nodeType===8);return e}function Un(r,e,t,n){var i=r.key,o=r.type,a=t-1,s=t+1,u=e[t];if(u===null||u&&i==u.key&&o===u.type&&!(131072&u.__u))return t;if(n>(u!=null&&!(131072&u.__u)?1:0))for(;a>=0||s<e.length;){if(a>=0){if((u=e[a])&&!(131072&u.__u)&&i==u.key&&o===u.type)return a;a--}if(s<e.length){if((u=e[s])&&!(131072&u.__u)&&i==u.key&&o===u.type)return s;s++}}return-1}function Dt(r,e,t){e[0]==="-"?r.setProperty(e,t??""):r[e]=t==null?"":typeof t!="number"||qn.test(e)?t:t+"px"}function xe(r,e,t,n,i){var o;e:if(e==="style")if(typeof t=="string")r.style.cssText=t;else{if(typeof n=="string"&&(r.style.cssText=n=""),n)for(e in n)t&&e in t||Dt(r.style,e,"");if(t)for(e in t)n&&t[e]===n[e]||Dt(r.style,e,t[e])}else if(e[0]==="o"&&e[1]==="n")o=e!==(e=e.replace(/(PointerCapture)$|Capture$/i,"$1")),e=e.toLowerCase()in r||e==="onFocusOut"||e==="onFocusIn"?e.toLowerCase().slice(2):e.slice(2),r.l||(r.l={}),r.l[e+o]=t,t?n?t.u=n.u:(t.u=wt,r.addEventListener(e,o?at:it,o)):r.removeEventListener(e,o?at:it,o);else{if(i=="http://www.w3.org/2000/svg")e=e.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if(e!="width"&&e!="height"&&e!="href"&&e!="list"&&e!="form"&&e!="tabIndex"&&e!="download"&&e!="rowSpan"&&e!="colSpan"&&e!="role"&&e!="popover"&&e in r)try{r[e]=t??"";break e}catch{}typeof t=="function"||(t==null||t===!1&&e[4]!=="-"?r.removeAttribute(e):r.setAttribute(e,e=="popover"&&t==1?"":t))}}function Ut(r){return function(e){if(this.l){var t=this.l[e.type+r];if(e.t==null)e.t=wt++;else if(e.t<t.u)return;return t(k.event?k.event(e):e)}}}function xt(r,e,t,n,i,o,a,s,u,l){var f,c,d,p,m,h,y,g,w,z,T,D,R,Mt,ye,De,Z=e.type;if(e.constructor!==void 0)return null;128&t.__u&&(u=!!(32&t.__u),o=[s=e.__e=t.__e]),(f=k.__b)&&f(e);e:if(typeof Z=="function")try{if(g=e.props,w="prototype"in Z&&Z.prototype.render,z=(f=Z.contextType)&&n[f.__c],T=f?z?z.props.value:f.__:n,t.__c?y=(c=e.__c=t.__c).__=c.__E:(w?e.__c=c=new Z(g,T):(e.__c=c=new Fe(g,T),c.constructor=Z,c.render=Bn),z&&z.sub(c),c.props=g,c.state||(c.state={}),c.context=T,c.__n=n,d=c.__d=!0,c.__h=[],c._sb=[]),w&&c.__s==null&&(c.__s=c.state),w&&Z.getDerivedStateFromProps!=null&&(c.__s==c.state&&(c.__s=W({},c.__s)),W(c.__s,Z.getDerivedStateFromProps(g,c.__s))),p=c.props,m=c.state,c.__v=e,d)w&&Z.getDerivedStateFromProps==null&&c.componentWillMount!=null&&c.componentWillMount(),w&&c.componentDidMount!=null&&c.__h.push(c.componentDidMount);else{if(w&&Z.getDerivedStateFromProps==null&&g!==p&&c.componentWillReceiveProps!=null&&c.componentWillReceiveProps(g,T),!c.__e&&(c.shouldComponentUpdate!=null&&c.shouldComponentUpdate(g,c.__s,T)===!1||e.__v===t.__v)){for(e.__v!==t.__v&&(c.props=g,c.state=c.__s,c.__d=!1),e.__e=t.__e,e.__k=t.__k,e.__k.forEach(function(we){we&&(we.__=e)}),D=0;D<c._sb.length;D++)c.__h.push(c._sb[D]);c._sb=[],c.__h.length&&a.push(c);break e}c.componentWillUpdate!=null&&c.componentWillUpdate(g,c.__s,T),w&&c.componentDidUpdate!=null&&c.__h.push(function(){c.componentDidUpdate(p,m,h)})}if(c.context=T,c.props=g,c.__P=r,c.__e=!1,R=k.__r,Mt=0,w){for(c.state=c.__s,c.__d=!1,R&&R(e),f=c.render(c.props,c.state,c.context),ye=0;ye<c._sb.length;ye++)c.__h.push(c._sb[ye]);c._sb=[]}else do c.__d=!1,R&&R(e),f=c.render(c.props,c.state,c.context),c.state=c.__s;while(c.__d&&++Mt<25);c.state=c.__s,c.getChildContext!=null&&(n=W(W({},n),c.getChildContext())),w&&!d&&c.getSnapshotBeforeUpdate!=null&&(h=c.getSnapshotBeforeUpdate(p,m)),Or(r,_t(De=f!=null&&f.type===je&&f.key==null?f.props.children:f)?De:[De],e,t,n,i,o,a,s,u,l),c.base=e.__e,e.__u&=-161,c.__h.length&&a.push(c),y&&(c.__E=c.__=null)}catch(we){e.__v=null,u||o!=null?(e.__e=s,e.__u|=u?160:32,o[o.indexOf(s)]=null):(e.__e=t.__e,e.__k=t.__k),k.__e(we,e,t)}else o==null&&e.__v===t.__v?(e.__k=t.__k,e.__e=t.__e):e.__e=Vn(t.__e,e,t,n,i,o,a,u,l);(f=k.diffed)&&f(e)}function Tr(r,e,t){e.__d=void 0;for(var n=0;n<t.length;n++)kt(t[n],t[++n],t[++n]);k.__c&&k.__c(e,r),r.some(function(i){try{r=i.__h,i.__h=[],r.some(function(o){o.call(i)})}catch(o){k.__e(o,i.__v)}})}function Vn(r,e,t,n,i,o,a,s,u){var l,f,c,d,p,m,h,y=t.props,g=e.props,w=e.type;if(w==="svg"?i="http://www.w3.org/2000/svg":w==="math"?i="http://www.w3.org/1998/Math/MathML":i||(i="http://www.w3.org/1999/xhtml"),o!=null){for(l=0;l<o.length;l++)if((p=o[l])&&"setAttribute"in p==!!w&&(w?p.localName===w:p.nodeType===3)){r=p,o[l]=null;break}}if(r==null){if(w===null)return document.createTextNode(g);r=document.createElementNS(i,w,g.is&&g),o=null,s=!1}if(w===null)y===g||s&&r.data===g||(r.data=g);else{if(o=o&&Ie.call(r.childNodes),y=t.props||fe,!s&&o!=null)for(y={},l=0;l<r.attributes.length;l++)y[(p=r.attributes[l]).name]=p.value;for(l in y)if(p=y[l],l!="children"){if(l=="dangerouslySetInnerHTML")c=p;else if(l!=="key"&&!(l in g)){if(l=="value"&&"defaultValue"in g||l=="checked"&&"defaultChecked"in g)continue;xe(r,l,null,p,i)}}for(l in g)p=g[l],l=="children"?d=p:l=="dangerouslySetInnerHTML"?f=p:l=="value"?m=p:l=="checked"?h=p:l==="key"||s&&typeof p!="function"||y[l]===p||xe(r,l,p,y[l],i);if(f)s||c&&(f.__html===c.__html||f.__html===r.innerHTML)||(r.innerHTML=f.__html),e.__k=[];else if(c&&(r.innerHTML=""),Or(r,_t(d)?d:[d],e,t,n,w==="foreignObject"?"http://www.w3.org/1999/xhtml":i,o,a,o?o[0]:t.__k&&Q(t,0),s,u),o!=null)for(l=o.length;l--;)o[l]!=null&&$r(o[l]);s||(l="value",m!==void 0&&(m!==r[l]||w==="progress"&&!m||w==="option"&&m!==y[l])&&xe(r,l,m,y[l],i),l="checked",h!==void 0&&h!==r[l]&&xe(r,l,h,y[l],i))}return r}function kt(r,e,t){try{typeof r=="function"?r(e):r.current=e}catch(n){k.__e(n,t)}}function ut(r,e,t){var n,i;if(k.unmount&&k.unmount(r),(n=r.ref)&&(n.current&&n.current!==r.__e||kt(n,null,e)),(n=r.__c)!=null){if(n.componentWillUnmount)try{n.componentWillUnmount()}catch(o){k.__e(o,e)}n.base=n.__P=null}if(n=r.__k)for(i=0;i<n.length;i++)n[i]&&ut(n[i],e,t||typeof r.type!="function");t||r.__e==null||$r(r.__e),r.__c=r.__=r.__e=r.__d=void 0}function Bn(r,e,t){return this.constructor(r,t)}function Mr(r,e,t){var n,i,o,a;k.__&&k.__(r,e),i=(n=typeof t=="function")?null:e.__k,o=[],a=[],xt(e,r=(!n&&t||e).__k=Cr(je,null,[r]),i||fe,fe,e.namespaceURI,!n&&t?[t]:i?null:e.firstChild?Ie.call(e.childNodes):null,o,!n&&t?t:i?i.__e:e.firstChild,n,a),Tr(o,r,a)}function Hn(r,e){var t={__c:e="__cC"+Ar++,__:r,Consumer:function(n,i){return n.children(i)},Provider:function(n){var i,o;return this.getChildContext||(i=[],(o={})[e]=this,this.getChildContext=function(){return o},this.componentWillUnmount=function(){i=null},this.shouldComponentUpdate=function(a){this.props.value!==a.value&&i.some(function(s){s.__e=!0,st(s)})},this.sub=function(a){i.push(a);var s=a.componentWillUnmount;a.componentWillUnmount=function(){i&&i.splice(i.indexOf(a),1),s&&s.call(a)}}),n.children}};return t.Provider.__=t.Consumer.contextType=t}Ie=Fr.slice,k={__e:function(r,e,t,n){for(var i,o,a;e=e.__;)if((i=e.__c)&&!i.__)try{if((o=i.constructor)&&o.getDerivedStateFromError!=null&&(i.setState(o.getDerivedStateFromError(r)),a=i.__d),i.componentDidCatch!=null&&(i.componentDidCatch(r,n||{}),a=i.__d),a)return i.__E=i}catch(s){r=s}throw r}},Er=0,Fe.prototype.setState=function(r,e){var t;t=this.__s!=null&&this.__s!==this.state?this.__s:this.__s=W({},this.state),typeof r=="function"&&(r=r(W({},t),this.props)),r&&W(t,r),r!=null&&this.__v&&(e&&this._sb.push(e),st(this))},Fe.prototype.forceUpdate=function(r){this.__v&&(this.__e=!0,r&&this.__h.push(r),st(this))},Fe.prototype.render=je,J=[],Sr=typeof Promise=="function"?Promise.prototype.then.bind(Promise.resolve()):setTimeout,ot=function(r,e){return r.__v.__b-e.__v.__b},Oe.__r=0,wt=0,it=Ut(!1),at=Ut(!0),Ar=0;var Ir=function(r,e,t,n){var i;e[0]=0;for(var o=1;o<e.length;o++){var a=e[o++],s=e[o]?(e[0]|=a?1:2,t[e[o++]]):e[++o];a===3?n[0]=s:a===4?n[1]=Object.assign(n[1]||{},s):a===5?(n[1]=n[1]||{})[e[++o]]=s:a===6?n[1][e[++o]]+=s+"":a?(i=r.apply(s,Ir(r,s,t,["",null])),n.push(i),s[0]?e[0]|=2:(e[o-2]=0,e[o]=i)):n.push(s)}return n},Vt=new Map;function Wn(r){var e=Vt.get(this);return e||(e=new Map,Vt.set(this,e)),(e=Ir(this,e.get(r)||(e.set(r,e=function(t){for(var n,i,o=1,a="",s="",u=[0],l=function(d){o===1&&(d||(a=a.replace(/^\s*\n\s*|\s*\n\s*$/g,"")))?u.push(0,d,a):o===3&&(d||a)?(u.push(3,d,a),o=2):o===2&&a==="..."&&d?u.push(4,d,0):o===2&&a&&!d?u.push(5,0,!0,a):o>=5&&((a||!d&&o===5)&&(u.push(o,0,a,i),o=6),d&&(u.push(o,d,0,i),o=6)),a=""},f=0;f<t.length;f++){f&&(o===1&&l(),l(f));for(var c=0;c<t[f].length;c++)n=t[f][c],o===1?n==="<"?(l(),u=[u],o=3):a+=n:o===4?a==="--"&&n===">"?(o=1,a=""):a=n+a[0]:s?n===s?s="":a+=n:n==='"'||n==="'"?s=n:n===">"?(l(),o=1):o&&(n==="="?(o=5,i=a,a=""):n==="/"&&(o<5||t[f][c+1]===">")?(l(),o===3&&(u=u[0]),o=u,(u=u[0]).push(2,0,o),o=0):n===" "||n==="	"||n===`
`||n==="\r"?(l(),o=2):a+=n),o===3&&a==="!--"&&(o=4,u=u[0])}return l(),u}(r)),e),arguments,[])).length>1?e:e[0]}var _=Wn.bind(Cr);let Gn={data:""},Yn=r=>typeof window=="object"?((r?r.querySelector("#_goober"):window._goober)||Object.assign((r||document.head).appendChild(document.createElement("style")),{innerHTML:" ",id:"_goober"})).firstChild:r||Gn,Jn=/(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,Xn=/\/\*[^]*?\*\/|  +/g,Bt=/\n+/g,X=(r,e)=>{let t="",n="",i="";for(let o in r){let a=r[o];o[0]=="@"?o[1]=="i"?t=o+" "+a+";":n+=o[1]=="f"?X(a,o):o+"{"+X(a,o[1]=="k"?"":e)+"}":typeof a=="object"?n+=X(a,e?e.replace(/([^,])+/g,s=>o.replace(/(^:.*)|([^,])+/g,u=>/&/.test(u)?u.replace(/&/g,s):s?s+" "+u:u)):o):a!=null&&(o=/^--/.test(o)?o:o.replace(/[A-Z]/g,"-$&").toLowerCase(),i+=X.p?X.p(o,a):o+":"+a+";")}return t+(e&&i?e+"{"+i+"}":i)+n},U={},jr=r=>{if(typeof r=="object"){let e="";for(let t in r)e+=t+jr(r[t]);return e}return r},Qn=(r,e,t,n,i)=>{let o=jr(r),a=U[o]||(U[o]=(u=>{let l=0,f=11;for(;l<u.length;)f=101*f+u.charCodeAt(l++)>>>0;return"go"+f})(o));if(!U[a]){let u=o!==r?r:(l=>{let f,c,d=[{}];for(;f=Jn.exec(l.replace(Xn,""));)f[4]?d.shift():f[3]?(c=f[3].replace(Bt," ").trim(),d.unshift(d[0][c]=d[0][c]||{})):d[0][f[1]]=f[2].replace(Bt," ").trim();return d[0]})(r);U[a]=X(i?{["@keyframes "+a]:u}:u,t?"":"."+a)}let s=t&&U.g?U.g:null;return t&&(U.g=U[a]),((u,l,f,c)=>{c?l.data=l.data.replace(c,u):l.data.indexOf(u)===-1&&(l.data=f?u+l.data:l.data+u)})(U[a],e,n,s),a},Kn=(r,e,t)=>r.reduce((n,i,o)=>{let a=e[o];if(a&&a.call){let s=a(t),u=s&&s.props&&s.props.className||/^go/.test(s)&&s;a=u?"."+u:s&&typeof s=="object"?s.props?"":X(s,""):s===!1?"":s}return n+i+(a??"")},"");function de(r){let e=this||{},t=r.call?r(e.p):r;return Qn(t.unshift?t.raw?Kn(t,[].slice.call(arguments,1),e.p):t.reduce((n,i)=>Object.assign(n,i&&i.call?i(e.p):i),{}):t,Yn(e.target),e.g,e.o,e.k)}de.bind({g:1});de.bind({k:1});const se=Hn(null);var oe,x,Be,Ht,pe=0,Nr=[],A=k,Wt=A.__b,Gt=A.__r,Yt=A.diffed,Jt=A.__c,Xt=A.unmount,Qt=A.__;function Ne(r,e){A.__h&&A.__h(x,r,pe||e),pe=0;var t=x.__H||(x.__H={__:[],__h:[]});return r>=t.__.length&&t.__.push({}),t.__[r]}function P(r){return pe=1,eo(Zr,r)}function eo(r,e,t){var n=Ne(oe++,2);if(n.t=r,!n.__c&&(n.__=[Zr(void 0,e),function(s){var u=n.__N?n.__N[0]:n.__[0],l=n.t(u,s);u!==l&&(n.__N=[l,n.__[1]],n.__c.setState({}))}],n.__c=x,!x.u)){var i=function(s,u,l){if(!n.__c.__H)return!0;var f=n.__c.__H.__.filter(function(d){return!!d.__c});if(f.every(function(d){return!d.__N}))return!o||o.call(this,s,u,l);var c=!1;return f.forEach(function(d){if(d.__N){var p=d.__[0];d.__=d.__N,d.__N=void 0,p!==d.__[0]&&(c=!0)}}),!(!c&&n.__c.props===s)&&(!o||o.call(this,s,u,l))};x.u=!0;var o=x.shouldComponentUpdate,a=x.componentWillUpdate;x.componentWillUpdate=function(s,u,l){if(this.__e){var f=o;o=void 0,i(s,u,l),o=f}a&&a.call(this,s,u,l)},x.shouldComponentUpdate=i}return n.__N||n.__}function ie(r,e){var t=Ne(oe++,3);!A.__s&&Rr(t.__H,e)&&(t.__=r,t.i=e,x.__H.__h.push(t))}function Et(r){return pe=5,St(function(){return{current:r}},[])}function St(r,e){var t=Ne(oe++,7);return Rr(t.__H,e)&&(t.__=r(),t.__H=e,t.__h=r),t.__}function to(r,e){return pe=8,St(function(){return r},e)}function ve(r){var e=x.context[r.__c],t=Ne(oe++,9);return t.c=r,e?(t.__==null&&(t.__=!0,e.sub(x)),e.props.value):r.__}function ro(){for(var r;r=Nr.shift();)if(r.__P&&r.__H)try{r.__H.__h.forEach($e),r.__H.__h.forEach(lt),r.__H.__h=[]}catch(e){r.__H.__h=[],A.__e(e,r.__v)}}A.__b=function(r){x=null,Wt&&Wt(r)},A.__=function(r,e){r&&e.__k&&e.__k.__m&&(r.__m=e.__k.__m),Qt&&Qt(r,e)},A.__r=function(r){Gt&&Gt(r),oe=0;var e=(x=r.__c).__H;e&&(Be===x?(e.__h=[],x.__h=[],e.__.forEach(function(t){t.__N&&(t.__=t.__N),t.i=t.__N=void 0})):(e.__h.forEach($e),e.__h.forEach(lt),e.__h=[],oe=0)),Be=x},A.diffed=function(r){Yt&&Yt(r);var e=r.__c;e&&e.__H&&(e.__H.__h.length&&(Nr.push(e)!==1&&Ht===A.requestAnimationFrame||((Ht=A.requestAnimationFrame)||no)(ro)),e.__H.__.forEach(function(t){t.i&&(t.__H=t.i),t.i=void 0})),Be=x=null},A.__c=function(r,e){e.some(function(t){try{t.__h.forEach($e),t.__h=t.__h.filter(function(n){return!n.__||lt(n)})}catch(n){e.some(function(i){i.__h&&(i.__h=[])}),e=[],A.__e(n,t.__v)}}),Jt&&Jt(r,e)},A.unmount=function(r){Xt&&Xt(r);var e,t=r.__c;t&&t.__H&&(t.__H.__.forEach(function(n){try{$e(n)}catch(i){e=i}}),t.__H=void 0,e&&A.__e(e,t.__v))};var Kt=typeof requestAnimationFrame=="function";function no(r){var e,t=function(){clearTimeout(n),Kt&&cancelAnimationFrame(e),setTimeout(r)},n=setTimeout(t,100);Kt&&(e=requestAnimationFrame(t))}function $e(r){var e=x,t=r.__c;typeof t=="function"&&(r.__c=void 0,t()),x=e}function lt(r){var e=x;r.__c=r.__(),x=e}function Rr(r,e){return!r||r.length!==e.length||e.some(function(t,n){return t!==r[n]})}function Zr(r,e){return typeof e=="function"?e(r):e}function ge(){const r=ve(se),e=St(()=>Zn(r),[r]),[t,n]=P({cards:[],rounds:[]}),i=e.subscribe(n);return ie(()=>()=>{i.unsubscribe()},[i]),t}function oo(r,e){var t=P(e),n=t[0],i=t[1],o=Et(r);return ie(function(){var a=o.current.subscribe(i);return function(){return a.unsubscribe()}}),n}function ee(){const r=ve(se);return oo(r.frontStateStorage.observe(),r.frontStateStorage.read)}function ce(r,e,t){ie(()=>{const n=e==null?void 0:e.current;if(n){const i=o=>t(o.detail);return n.addEventListener(r,i),()=>n.removeEventListener(r,i)}},[r,t,e])}function ue(){const{cards:r,rounds:e}=ge();return hr(e,r)}function Lr(){const{rounds:r}=ge();return r.sort((e,t)=>e.position-t.position).findLast(Boolean)}function io(){const{cards:r,rounds:e}=ge(),t=ve(se),n=hr(e,r),{role:i,signature:o,game:a}=ee();if(!r.length)return _`<span></span>`;function s(f){i===B.IntuitionMaster&&n===F.IntuitionMasterTurn&&Rn(t,a,[f],o)}const u=f=>i===B.WordMaster&&e.some(c=>{var d;return(d=c.cards)==null?void 0:d.map(p=>p.word).includes(f.word)}),l=de`
		display: grid;
		place-content: center;
		text-align: center;

		& > div {
			max-width: 75rem;
		}
	`;return _`
		<ul aria-label="Playground" style="display: none;">
			${r.map(f=>_`
					<li>
						<label>
							${f.word}
							<input
								onClick=${()=>s(f)}
								type="checkbox"/>
						</label>
					</li>
				`)}
		</ul>

		<div class=${l}>
			<div>
				${r.map(f=>_`
						<polynames-card
							word=${f.word}
							kind=${f.kind}
							guessed=${u(f)}
							onClick=${()=>s(f)}
						>
						</polynames-card>
					`)}
			</div>
		</div>
	`}function ao(){const r=ue(),e=ve(se),[t,n]=P(""),[i,o]=P(void 0),{role:a,signature:s,game:u}=ee(),l=Et(null),f=()=>{Nn(e,t,Number(i),s,u)};return ce("polynamescountinput",l,c=>{o(c)}),ce("polynamesinput",l,c=>{n(c)}),ce("polynamesclickbutton",l,f),r!==F.WordMasterTurn||a!==B.WordMaster?_`<span></span>`:_`
		<div style="display: none;">
            <input
				type="text"
				placeholder="Entrez un indice"
				value=${t}
				onInput=${c=>n(c.target.value)} />

			<input
				type="number"
				placeholder="Nombre de mots"
				value=${i}
				onInput=${c=>o(c.target.value)} />

			<button
				aria-label="Envoyer l'indice"
				onClick=${f}>
				Envoyer
			</button>
		</div>

		<div style="display: grid; place-content: center;">
			<polynames-input ref=${l}></polynames-input>
		</div>
	`}function so(){return _`
		<polynames-instruction>
			<${uo} />
			<${lo} />
			<${co} />
			<${po} />
			<${fo} />
		</polynames-instruction>
	`}function uo(){const{rounds:r}=ge(),e=ue(),t=qr(r);return e!==F.Finished?_`<span></span>`:_`<span>La partie est finie ! Vous avez ${t} points ! </span>`}function lo(){const{role:r}=ee(),e=ue(),t=Lr();return e!==F.IntuitionMasterTurn||r!==B.IntuitionMaster?_`<span></span>`:_`
		<span>Devinez les cartes ! Indice: ${t.hint}.</span>
	`}function co(){const{role:r}=ee();return ue()!==F.WordMasterTurn||r!==B.WordMaster?_`<span></span>`:_`
		<span>Envoyez un indice a l'autre joueur, et le nombre de cartes pour cet indice ! </span>
	`}function fo(){const{role:r}=ee(),e=ue();return e===F.IntuitionMasterTurn&&r===B.WordMaster?_`<span>Attendez que le Maitre des intuitions ai devinee les mots... </span>`:e===F.WordMasterTurn&&r===B.IntuitionMaster?_`<span>Attendez que le Maitre des mots ai donnee son indice... </span>`:_`<span></span>`}function po(){var i;const{role:r}=ee(),e=ue(),t=Lr();if(r!==B.IntuitionMaster||e!==F.IntuitionMasterTurn)return _`<span></span>`;const n=1+t.count-(((i=t.cards)==null?void 0:i.length)||0);return _`<span> ${n} mots restants. </span>`}function ho(){const r=ve(se),{signature:e,game:t}=ee(),n=Et(null),[i,o]=P(!1),[a,s]=P(0),[u,l]=P(er()),[f,c]=P("Attente de l'autre joueur...");function d(m){r.frontStateStorage.save({game:m})}ie(()=>{if(i){const m=setInterval(()=>{s(h=>h+1),a>=u.length-1&&(s(0),l(er())),c(u[a])},6e3);return()=>clearInterval(m)}},[a,i,u]);const p=to(async()=>{o(!0);const{signature:m,role:h}=await jn(r,t);r.frontStateStorage.save({signature:m,role:h})},[r,t]);return ce("polynamesinput",n,d),ce("polynamesclickbutton",n,p),e?_`<span></span>`:i?_`
			<polynames-instruction>
				${f}
			</polynames-instruction>

			<div style="display: grid; place-content: center;">
				<svg width="45" height="45" viewBox="0 0 45 45" xmlns="http://www.w3.org/2000/svg" stroke="#fff">
					<g fill="none" fill-rule="evenodd" transform="translate(1 1)" stroke-width="2">
						<circle cx="22" cy="22" r="6" stroke-opacity="0">
							<animate attributeName="r"
								begin="1.5s" dur="3s"
								values="6;22"
								calcMode="linear"
								repeatCount="indefinite" />
							<animate attributeName="stroke-opacity"
								begin="1.5s" dur="3s"
								values="1;0" calcMode="linear"
								repeatCount="indefinite" />
							<animate attributeName="stroke-width"
								begin="1.5s" dur="3s"
								values="2;0" calcMode="linear"
								repeatCount="indefinite" />
						</circle>
						<circle cx="22" cy="22" r="6" stroke-opacity="0">
							<animate attributeName="r"
								begin="3s" dur="3s"
								values="6;22"
								calcMode="linear"
								repeatCount="indefinite" />
							<animate attributeName="stroke-opacity"
								begin="3s" dur="3s"
								values="1;0" calcMode="linear"
								repeatCount="indefinite" />
							<animate attributeName="stroke-width"
								begin="3s" dur="3s"
								values="2;0" calcMode="linear"
								repeatCount="indefinite" />
						</circle>
						<circle cx="22" cy="22" r="8">
							<animate attributeName="r"
								begin="0s" dur="1.5s"
								values="6;1;2;3;4;5;6"
								calcMode="linear"
								repeatCount="indefinite" />
						</circle>
					</g>
				</svg>
			</div>
		`:_`
        <div style="display: none;">
            <input
                type="text"
                value=${t}
				placeholder="Game ID"
                onInput=${m=>d(m.target.value)}
            />

            <button onClick=${p}>Join</button>
        </div>

		<div style="display: grid; place-content: center;">
			<polynames-join-input ref=${n}></polynames-join-input>
		</div>
    `}function er(){return["Attente de l'autre joueur...","Il arrivera certainement bientôt...",...[["Peut-être qu'il est coincé dans un ascenseur...","Ou alors il a perdu son téléphone...","Ou bien il a perdu son téléphone dans un ascenseur..."],["C'est cool Polynames non ?","Rien a voir avec l'autre jeu...","Toute ressemblance avec un jeu existant serait purement fortuite.","(͡ ° ͜ʖ ͡ °)"]].sort(()=>Math.random()-.5).flat(),...[["Vous aimez les jeux de mots ?","Pourquoi les plongeurs plongent-ils toujours en arrière et jamais en avant ?","Parce que sinon ils tombent dans le bateau !","Vous avez compris ?"],["Pfiou, Je suis à court d'idées...","Je vais vous laisser réfléchir à votre propre blague.","Je suis sûr que vous êtes très drôle.","Je vous fais confiance."]].sort(()=>Math.random()-.5).flat(),...[["Vous êtes toujours là ?","Vous êtes vraiment patient...","Ou alors c'est juste que vous aimez m'entendre parler...","Je vous comprends."],["Vous êtes une belle personne.","Pardon, c'était un peu direct...","*Silence gênant*"]].sort(()=>Math.random()-.5).flat(),"On risque de se répéter au bout d'un moment..."]}function mo(){const[r,e]=P(0),[t,n]=P(0),[i,o]=P(0),[a,s]=P(0),[u,l]=P(0),[f,c]=P(0),{rounds:d}=ge();return ie(()=>{const p=qr(d),m=p-r;m&&(e(p),c(m),s(t),l(i))},[d,r,t,i]),ie(()=>{const p=m=>{n(m.clientX),o(m.clientY)};return window.addEventListener("mousemove",p),()=>{window.removeEventListener("mousemove",p)}},[]),_`
		<polynames-point x=${a} y=${u}>
            +${f} Pt
		</polynames-point>
	`}function bo({context:r,dataTestid:e}){const t=de`
		display: grid;
		grid-template-columns: 1fr;
		grid-template-rows: 1fr;
	`,n=de`
		grid-area: 1 / 1 / 2 / 2;
	`;return _`
		<${se.Provider} value=${r}>
			<div className=${t}>
				<polynames-background
					className=${n}
					style="z-index: -1;">
				</polynames-background>

				<div
					className=${n}
					style="max-height: 100vh; overflow-y: auto;"
					data-testid=${e}>
					<polynames-title></polynames-title>
					<${so} />
					<${ao} />
					<${ho} />
					<${io} />
					<${mo} />
				</div>
			</div>
		<//>
	`}function vo(r,e){Mr(_`<${bo} context=${e} />`,r)}function go(r){Mr(null,r)}function qr(r){let e=0;for(const t of r){let n=0;if(t.cards)for(const i of t.cards)i.kind===re.Target&&(n++,e+=n>t.count?n*n:n)}return e}function yo(r){return r&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r}function wo(r){if(r.__esModule)return r;var e=r.default;if(typeof e=="function"){var t=function n(){return this instanceof n?Reflect.construct(e,arguments,this.constructor):e.apply(this,arguments)};t.prototype=e.prototype}else t={};return Object.defineProperty(t,"__esModule",{value:!0}),Object.keys(r).forEach(function(n){var i=Object.getOwnPropertyDescriptor(r,n);Object.defineProperty(t,n,i.get?i:{enumerable:!0,get:function(){return r[n]}})}),t}const _o={},xo=Object.freeze(Object.defineProperty({__proto__:null,default:_o},Symbol.toStringTag,{value:"Module"})),Re=wo(xo);var S={},Dr=Re,ct=S.ValidationError=function(e,t,n,i,o,a){if(Array.isArray(i)?(this.path=i,this.property=i.reduce(function(u,l){return u+Ur(l)},"instance")):i!==void 0&&(this.property=i),e&&(this.message=e),n){var s=n.$id||n.id;this.schema=s||n}t!==void 0&&(this.instance=t),this.name=o,this.argument=a,this.stack=this.toString()};ct.prototype.toString=function(){return this.property+" "+this.message};var Ze=S.ValidatorResult=function(e,t,n,i){this.instance=e,this.schema=t,this.options=n,this.path=i.path,this.propertyPath=i.propertyPath,this.errors=[],this.throwError=n&&n.throwError,this.throwFirst=n&&n.throwFirst,this.throwAll=n&&n.throwAll,this.disableFormat=n&&n.disableFormat===!0};Ze.prototype.addError=function(e){var t;if(typeof e=="string")t=new ct(e,this.instance,this.schema,this.path);else{if(!e)throw new Error("Missing error detail");if(!e.message)throw new Error("Missing error message");if(!e.name)throw new Error("Missing validator type");t=new ct(e.message,this.instance,this.schema,this.path,e.name,e.argument)}if(this.errors.push(t),this.throwFirst)throw new K(this);if(this.throwError)throw t;return t};Ze.prototype.importErrors=function(e){typeof e=="string"||e&&e.validatorType?this.addError(e):e&&e.errors&&(this.errors=this.errors.concat(e.errors))};function ko(r,e){return e+": "+r.toString()+`
`}Ze.prototype.toString=function(e){return this.errors.map(ko).join("")};Object.defineProperty(Ze.prototype,"valid",{get:function(){return!this.errors.length}});S.ValidatorResultError=K;function K(r){Error.captureStackTrace&&Error.captureStackTrace(this,K),this.instance=r.instance,this.schema=r.schema,this.options=r.options,this.errors=r.errors}K.prototype=new Error;K.prototype.constructor=K;K.prototype.name="Validation Error";var tr=S.SchemaError=function r(e,t){this.message=e,this.schema=t,Error.call(this,e),Error.captureStackTrace(this,r)};tr.prototype=Object.create(Error.prototype,{constructor:{value:tr,enumerable:!1},name:{value:"SchemaError",enumerable:!1}});var ft=S.SchemaContext=function(e,t,n,i,o){this.schema=e,this.options=t,Array.isArray(n)?(this.path=n,this.propertyPath=n.reduce(function(a,s){return a+Ur(s)},"instance")):this.propertyPath=n,this.base=i,this.schemas=o};ft.prototype.resolve=function(e){return Dr.resolve(this.base,e)};ft.prototype.makeChild=function(e,t){var n=t===void 0?this.path:this.path.concat([t]),i=e.$id||e.id,o=Dr.resolve(this.base,i||""),a=new ft(e,this.options,n,o,Object.create(this.schemas));return i&&!a.schemas[o]&&(a.schemas[o]=e),a};var M=S.FORMAT_REGEXPS={"date-time":/^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,date:/^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,time:/^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,duration:/P(T\d+(H(\d+M(\d+S)?)?|M(\d+S)?|S)|\d+(D|M(\d+D)?|Y(\d+M(\d+D)?)?)(T\d+(H(\d+M(\d+S)?)?|M(\d+S)?|S))?|\d+W)/i,email:/^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,"idn-email":/^("(?:[!#-\[\]-\u{10FFFF}]|\\[\t -\u{10FFFF}])*"|[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}](?:\.?[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}])*)@([!#-'*+\-/-9=?A-Z\^-\u{10FFFF}](?:\.?[!#-'*+\-/-9=?A-Z\^-\u{10FFFF}])*|\[[!-Z\^-\u{10FFFF}]*\])$/u,"ip-address":/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,ipv6:/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,uri:/^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$/,"uri-reference":/^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/,iri:/^[a-zA-Z][a-zA-Z0-9+.-]*:[^\s]*$/,"iri-reference":/^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\u{10FFFF}]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~-\u{10FFFF}]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~-\u{10FFFF}])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\u{10FFFF}]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\u{10FFFF}])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\u{10FFFF}])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~-\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/u,uuid:/^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,"uri-template":/(%[0-9a-f]{2}|[!#$&(-;=?@\[\]_a-z~]|\{[!#&+,./;=?@|]?(%[0-9a-f]{2}|[0-9_a-z])(\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\d{0,3}|\*)?(,(%[0-9a-f]{2}|[0-9_a-z])(\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\d{0,3}|\*)?)*\})*/iu,"json-pointer":/^(\/([\x00-\x2e0-@\[-}\x7f]|~[01])*)*$/iu,"relative-json-pointer":/^\d+(#|(\/([\x00-\x2e0-@\[-}\x7f]|~[01])*)*)$/iu,hostname:/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,"host-name":/^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,"utc-millisec":function(r){return typeof r=="string"&&parseFloat(r)===parseInt(r,10)&&!isNaN(r)},regex:function(r){var e=!0;try{new RegExp(r)}catch{e=!1}return e},style:/[\r\n\t ]*[^\r\n\t ][^:]*:[\r\n\t ]*[^\r\n\t ;]*[\r\n\t ]*;?/,color:/^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,phone:/^\+(?:[0-9] ?){6,14}[0-9]$/,alpha:/^[a-zA-Z]+$/,alphanumeric:/^[a-zA-Z0-9]+$/};M.regexp=M.regex;M.pattern=M.regex;M.ipv4=M["ip-address"];S.isFormat=function(e,t,n){if(typeof e=="string"&&M[t]!==void 0){if(M[t]instanceof RegExp)return M[t].test(e);if(typeof M[t]=="function")return M[t](e)}else if(n&&n.customFormats&&typeof n.customFormats[t]=="function")return n.customFormats[t](e);return!0};var Ur=S.makeSuffix=function(e){return e=e.toString(),!e.match(/[.\s\[\]]/)&&!e.match(/^[\d]/)?"."+e:e.match(/^\d+$/)?"["+e+"]":"["+JSON.stringify(e)+"]"};S.deepCompareStrict=function r(e,t){if(typeof e!=typeof t)return!1;if(Array.isArray(e))return!Array.isArray(t)||e.length!==t.length?!1:e.every(function(o,a){return r(e[a],t[a])});if(typeof e=="object"){if(!e||!t)return e===t;var n=Object.keys(e),i=Object.keys(t);return n.length!==i.length?!1:n.every(function(o){return r(e[o],t[o])})}return e===t};function Eo(r,e,t,n){typeof t=="object"?e[n]=At(r[n],t):r.indexOf(t)===-1&&e.push(t)}function So(r,e,t){e[t]=r[t]}function Ao(r,e,t,n){typeof e[n]!="object"||!e[n]?t[n]=e[n]:r[n]?t[n]=At(r[n],e[n]):t[n]=e[n]}function At(r,e){var t=Array.isArray(e),n=t&&[]||{};return t?(r=r||[],n=n.concat(r),e.forEach(Eo.bind(null,r,n))):(r&&typeof r=="object"&&Object.keys(r).forEach(So.bind(null,r,n)),Object.keys(e).forEach(Ao.bind(null,r,e,n))),n}S.deepMerge=At;S.objectGetPath=function(e,t){for(var n=t.split("/").slice(1),i;typeof(i=n.shift())=="string";){var o=decodeURIComponent(i.replace(/~0/,"~").replace(/~1/g,"/"));if(!(o in e))return;e=e[o]}return e};function Fo(r){return"/"+encodeURIComponent(r).replace(/~/g,"%7E")}S.encodePath=function(e){return e.map(Fo).join("")};S.getDecimalPlaces=function(e){var t=0;if(isNaN(e))return t;typeof e!="number"&&(e=Number(e));var n=e.toString().split("e");if(n.length===2){if(n[1][0]!=="-")return t;t=Number(n[1].slice(1))}var i=n[0].split(".");return i.length===2&&(t+=i[1].length),t};S.isSchema=function(e){return typeof e=="object"&&e||typeof e=="boolean"};var O=S,b=O.ValidatorResult,G=O.SchemaError,Ft={};Ft.ignoreProperties={id:!0,default:!0,description:!0,title:!0,additionalItems:!0,then:!0,else:!0,$schema:!0,$ref:!0,extends:!0};var v=Ft.validators={};v.type=function(e,t,n,i){if(e===void 0)return null;var o=new b(e,t,n,i),a=Array.isArray(t.type)?t.type:[t.type];if(!a.some(this.testType.bind(this,e,t,n,i))){var s=a.map(function(u){if(u){var l=u.$id||u.id;return l?"<"+l+">":u+""}});o.addError({name:"type",argument:s,message:"is not of a type(s) "+s})}return o};function $t(r,e,t,n,i){var o=e.throwError,a=e.throwAll;e.throwError=!1,e.throwAll=!1;var s=this.validateSchema(r,i,e,t);return e.throwError=o,e.throwAll=a,!s.valid&&n instanceof Function&&n(s),s.valid}v.anyOf=function(e,t,n,i){if(e===void 0)return null;var o=new b(e,t,n,i),a=new b(e,t,n,i);if(!Array.isArray(t.anyOf))throw new G("anyOf must be an array");if(!t.anyOf.some($t.bind(this,e,n,i,function(u){a.importErrors(u)}))){var s=t.anyOf.map(function(u,l){var f=u.$id||u.id;return f?"<"+f+">":u.title&&JSON.stringify(u.title)||u.$ref&&"<"+u.$ref+">"||"[subschema "+l+"]"});n.nestedErrors&&o.importErrors(a),o.addError({name:"anyOf",argument:s,message:"is not any of "+s.join(",")})}return o};v.allOf=function(e,t,n,i){if(e===void 0)return null;if(!Array.isArray(t.allOf))throw new G("allOf must be an array");var o=new b(e,t,n,i),a=this;return t.allOf.forEach(function(s,u){var l=a.validateSchema(e,s,n,i);if(!l.valid){var f=s.$id||s.id,c=f||s.title&&JSON.stringify(s.title)||s.$ref&&"<"+s.$ref+">"||"[subschema "+u+"]";o.addError({name:"allOf",argument:{id:c,length:l.errors.length,valid:l},message:"does not match allOf schema "+c+" with "+l.errors.length+" error[s]:"}),o.importErrors(l)}}),o};v.oneOf=function(e,t,n,i){if(e===void 0)return null;if(!Array.isArray(t.oneOf))throw new G("oneOf must be an array");var o=new b(e,t,n,i),a=new b(e,t,n,i),s=t.oneOf.filter($t.bind(this,e,n,i,function(l){a.importErrors(l)})).length,u=t.oneOf.map(function(l,f){var c=l.$id||l.id;return c||l.title&&JSON.stringify(l.title)||l.$ref&&"<"+l.$ref+">"||"[subschema "+f+"]"});return s!==1&&(n.nestedErrors&&o.importErrors(a),o.addError({name:"oneOf",argument:u,message:"is not exactly one from "+u.join(",")})),o};v.if=function(e,t,n,i){if(e===void 0)return null;if(!O.isSchema(t.if))throw new Error('Expected "if" keyword to be a schema');var o=$t.call(this,e,n,i,null,t.if),a=new b(e,t,n,i),s;if(o){if(t.then===void 0)return;if(!O.isSchema(t.then))throw new Error('Expected "then" keyword to be a schema');s=this.validateSchema(e,t.then,n,i.makeChild(t.then)),a.importErrors(s)}else{if(t.else===void 0)return;if(!O.isSchema(t.else))throw new Error('Expected "else" keyword to be a schema');s=this.validateSchema(e,t.else,n,i.makeChild(t.else)),a.importErrors(s)}return a};function Ct(r,e){if(Object.hasOwnProperty.call(r,e))return r[e];if(e in r){for(;r=Object.getPrototypeOf(r);)if(Object.propertyIsEnumerable.call(r,e))return r[e]}}v.propertyNames=function(e,t,n,i){if(this.types.object(e)){var o=new b(e,t,n,i),a=t.propertyNames!==void 0?t.propertyNames:{};if(!O.isSchema(a))throw new G('Expected "propertyNames" to be a schema (object or boolean)');for(var s in e)if(Ct(e,s)!==void 0){var u=this.validateSchema(s,a,n,i.makeChild(a));o.importErrors(u)}return o}};v.properties=function(e,t,n,i){if(this.types.object(e)){var o=new b(e,t,n,i),a=t.properties||{};for(var s in a){var u=a[s];if(u!==void 0){if(u===null)throw new G('Unexpected null, expected schema in "properties"');typeof n.preValidateProperty=="function"&&n.preValidateProperty(e,s,u,n,i);var l=Ct(e,s),f=this.validateSchema(l,u,n,i.makeChild(u,s));f.instance!==o.instance[s]&&(o.instance[s]=f.instance),o.importErrors(f)}}return o}};function Vr(r,e,t,n,i,o){if(this.types.object(r)&&!(e.properties&&e.properties[i]!==void 0))if(e.additionalProperties===!1)o.addError({name:"additionalProperties",argument:i,message:"is not allowed to have the additional property "+JSON.stringify(i)});else{var a=e.additionalProperties||{};typeof t.preValidateProperty=="function"&&t.preValidateProperty(r,i,a,t,n);var s=this.validateSchema(r[i],a,t,n.makeChild(a,i));s.instance!==o.instance[i]&&(o.instance[i]=s.instance),o.importErrors(s)}}v.patternProperties=function(e,t,n,i){if(this.types.object(e)){var o=new b(e,t,n,i),a=t.patternProperties||{};for(var s in e){var u=!0;for(var l in a){var f=a[l];if(f!==void 0){if(f===null)throw new G('Unexpected null, expected schema in "patternProperties"');try{var c=new RegExp(l,"u")}catch{c=new RegExp(l)}if(c.test(s)){u=!1,typeof n.preValidateProperty=="function"&&n.preValidateProperty(e,s,f,n,i);var d=this.validateSchema(e[s],f,n,i.makeChild(f,s));d.instance!==o.instance[s]&&(o.instance[s]=d.instance),o.importErrors(d)}}}u&&Vr.call(this,e,t,n,i,s,o)}return o}};v.additionalProperties=function(e,t,n,i){if(this.types.object(e)){if(t.patternProperties)return null;var o=new b(e,t,n,i);for(var a in e)Vr.call(this,e,t,n,i,a,o);return o}};v.minProperties=function(e,t,n,i){if(this.types.object(e)){var o=new b(e,t,n,i),a=Object.keys(e);return a.length>=t.minProperties||o.addError({name:"minProperties",argument:t.minProperties,message:"does not meet minimum property length of "+t.minProperties}),o}};v.maxProperties=function(e,t,n,i){if(this.types.object(e)){var o=new b(e,t,n,i),a=Object.keys(e);return a.length<=t.maxProperties||o.addError({name:"maxProperties",argument:t.maxProperties,message:"does not meet maximum property length of "+t.maxProperties}),o}};v.items=function(e,t,n,i){var o=this;if(this.types.array(e)&&t.items!==void 0){var a=new b(e,t,n,i);return e.every(function(s,u){if(Array.isArray(t.items))var l=t.items[u]===void 0?t.additionalItems:t.items[u];else var l=t.items;if(l===void 0)return!0;if(l===!1)return a.addError({name:"items",message:"additionalItems not permitted"}),!1;var f=o.validateSchema(s,l,n,i.makeChild(l,u));return f.instance!==a.instance[u]&&(a.instance[u]=f.instance),a.importErrors(f),!0}),a}};v.contains=function(e,t,n,i){var o=this;if(this.types.array(e)&&t.contains!==void 0){if(!O.isSchema(t.contains))throw new Error('Expected "contains" keyword to be a schema');var a=new b(e,t,n,i),s=e.some(function(u,l){var f=o.validateSchema(u,t.contains,n,i.makeChild(t.contains,l));return f.errors.length===0});return s===!1&&a.addError({name:"contains",argument:t.contains,message:"must contain an item matching given schema"}),a}};v.minimum=function(e,t,n,i){if(this.types.number(e)){var o=new b(e,t,n,i);return t.exclusiveMinimum&&t.exclusiveMinimum===!0?e>t.minimum||o.addError({name:"minimum",argument:t.minimum,message:"must be greater than "+t.minimum}):e>=t.minimum||o.addError({name:"minimum",argument:t.minimum,message:"must be greater than or equal to "+t.minimum}),o}};v.maximum=function(e,t,n,i){if(this.types.number(e)){var o=new b(e,t,n,i);return t.exclusiveMaximum&&t.exclusiveMaximum===!0?e<t.maximum||o.addError({name:"maximum",argument:t.maximum,message:"must be less than "+t.maximum}):e<=t.maximum||o.addError({name:"maximum",argument:t.maximum,message:"must be less than or equal to "+t.maximum}),o}};v.exclusiveMinimum=function(e,t,n,i){if(typeof t.exclusiveMinimum!="boolean"&&this.types.number(e)){var o=new b(e,t,n,i),a=e>t.exclusiveMinimum;return a||o.addError({name:"exclusiveMinimum",argument:t.exclusiveMinimum,message:"must be strictly greater than "+t.exclusiveMinimum}),o}};v.exclusiveMaximum=function(e,t,n,i){if(typeof t.exclusiveMaximum!="boolean"&&this.types.number(e)){var o=new b(e,t,n,i),a=e<t.exclusiveMaximum;return a||o.addError({name:"exclusiveMaximum",argument:t.exclusiveMaximum,message:"must be strictly less than "+t.exclusiveMaximum}),o}};var Br=function(e,t,n,i,o,a){if(this.types.number(e)){var s=t[o];if(s==0)throw new G(o+" cannot be zero");var u=new b(e,t,n,i),l=O.getDecimalPlaces(e),f=O.getDecimalPlaces(s),c=Math.max(l,f),d=Math.pow(10,c);return Math.round(e*d)%Math.round(s*d)!==0&&u.addError({name:o,argument:s,message:a+JSON.stringify(s)}),u}};v.multipleOf=function(e,t,n,i){return Br.call(this,e,t,n,i,"multipleOf","is not a multiple of (divisible by) ")};v.divisibleBy=function(e,t,n,i){return Br.call(this,e,t,n,i,"divisibleBy","is not divisible by (multiple of) ")};v.required=function(e,t,n,i){var o=new b(e,t,n,i);return e===void 0&&t.required===!0?o.addError({name:"required",message:"is required"}):this.types.object(e)&&Array.isArray(t.required)&&t.required.forEach(function(a){Ct(e,a)===void 0&&o.addError({name:"required",argument:a,message:"requires property "+JSON.stringify(a)})}),o};v.pattern=function(e,t,n,i){if(this.types.string(e)){var o=new b(e,t,n,i),a=t.pattern;try{var s=new RegExp(a,"u")}catch{s=new RegExp(a)}return e.match(s)||o.addError({name:"pattern",argument:t.pattern,message:"does not match pattern "+JSON.stringify(t.pattern.toString())}),o}};v.format=function(e,t,n,i){if(e!==void 0){var o=new b(e,t,n,i);return!o.disableFormat&&!O.isFormat(e,t.format,this)&&o.addError({name:"format",argument:t.format,message:"does not conform to the "+JSON.stringify(t.format)+" format"}),o}};v.minLength=function(e,t,n,i){if(this.types.string(e)){var o=new b(e,t,n,i),a=e.match(/[\uDC00-\uDFFF]/g),s=e.length-(a?a.length:0);return s>=t.minLength||o.addError({name:"minLength",argument:t.minLength,message:"does not meet minimum length of "+t.minLength}),o}};v.maxLength=function(e,t,n,i){if(this.types.string(e)){var o=new b(e,t,n,i),a=e.match(/[\uDC00-\uDFFF]/g),s=e.length-(a?a.length:0);return s<=t.maxLength||o.addError({name:"maxLength",argument:t.maxLength,message:"does not meet maximum length of "+t.maxLength}),o}};v.minItems=function(e,t,n,i){if(this.types.array(e)){var o=new b(e,t,n,i);return e.length>=t.minItems||o.addError({name:"minItems",argument:t.minItems,message:"does not meet minimum length of "+t.minItems}),o}};v.maxItems=function(e,t,n,i){if(this.types.array(e)){var o=new b(e,t,n,i);return e.length<=t.maxItems||o.addError({name:"maxItems",argument:t.maxItems,message:"does not meet maximum length of "+t.maxItems}),o}};function $o(r,e,t){var n,i=t.length;for(n=e+1,i;n<i;n++)if(O.deepCompareStrict(r,t[n]))return!1;return!0}v.uniqueItems=function(e,t,n,i){if(t.uniqueItems===!0&&this.types.array(e)){var o=new b(e,t,n,i);return e.every($o)||o.addError({name:"uniqueItems",message:"contains duplicate item"}),o}};v.dependencies=function(e,t,n,i){if(this.types.object(e)){var o=new b(e,t,n,i);for(var a in t.dependencies)if(e[a]!==void 0){var s=t.dependencies[a],u=i.makeChild(s,a);if(typeof s=="string"&&(s=[s]),Array.isArray(s))s.forEach(function(f){e[f]===void 0&&o.addError({name:"dependencies",argument:u.propertyPath,message:"property "+f+" not found, required by "+u.propertyPath})});else{var l=this.validateSchema(e,s,n,u);o.instance!==l.instance&&(o.instance=l.instance),l&&l.errors.length&&(o.addError({name:"dependencies",argument:u.propertyPath,message:"does not meet dependency required by "+u.propertyPath}),o.importErrors(l))}}return o}};v.enum=function(e,t,n,i){if(e===void 0)return null;if(!Array.isArray(t.enum))throw new G("enum expects an array",t);var o=new b(e,t,n,i);return t.enum.some(O.deepCompareStrict.bind(null,e))||o.addError({name:"enum",argument:t.enum,message:"is not one of enum values: "+t.enum.map(String).join(",")}),o};v.const=function(e,t,n,i){if(e===void 0)return null;var o=new b(e,t,n,i);return O.deepCompareStrict(t.const,e)||o.addError({name:"const",argument:t.const,message:"does not exactly match expected constant: "+t.const}),o};v.not=v.disallow=function(e,t,n,i){var o=this;if(e===void 0)return null;var a=new b(e,t,n,i),s=t.not||t.disallow;return s?(Array.isArray(s)||(s=[s]),s.forEach(function(u){if(o.testType(e,t,n,i,u)){var l=u&&(u.$id||u.id),f=l||u;a.addError({name:"not",argument:f,message:"is of prohibited type "+f})}}),a):null};var Co=Ft,Pt={},rr=Re,Po=S;Pt.SchemaScanResult=Hr;function Hr(r,e){this.id=r,this.ref=e}Pt.scan=function(e,t){function n(u,l){if(!(!l||typeof l!="object")){if(l.$ref){var f=rr.resolve(u,l.$ref);s[f]=s[f]?s[f]+1:0;return}var c=l.$id||l.id,d=c?rr.resolve(u,c):u;if(d){if(d.indexOf("#")<0&&(d+="#"),a[d]){if(!Po.deepCompareStrict(a[d],l))throw new Error("Schema <"+d+"> already exists with different definition");return a[d]}a[d]=l,d[d.length-1]=="#"&&(a[d.substring(0,d.length-1)]=l)}i(d+"/items",Array.isArray(l.items)?l.items:[l.items]),i(d+"/extends",Array.isArray(l.extends)?l.extends:[l.extends]),n(d+"/additionalItems",l.additionalItems),o(d+"/properties",l.properties),n(d+"/additionalProperties",l.additionalProperties),o(d+"/definitions",l.definitions),o(d+"/patternProperties",l.patternProperties),o(d+"/dependencies",l.dependencies),i(d+"/disallow",l.disallow),i(d+"/allOf",l.allOf),i(d+"/anyOf",l.anyOf),i(d+"/oneOf",l.oneOf),n(d+"/not",l.not)}}function i(u,l){if(Array.isArray(l))for(var f=0;f<l.length;f++)n(u+"/"+f,l[f])}function o(u,l){if(!(!l||typeof l!="object"))for(var f in l)n(u+"/"+f,l[f])}var a={},s={};return n(e,t),new Hr(a,s)};var Wr=Re,Gr=Co,te=S,Yr=Pt.scan,Jr=te.ValidatorResult,Oo=te.ValidatorResultError,he=te.SchemaError,Xr=te.SchemaContext,Qr="/",$=function r(){this.customFormats=Object.create(r.prototype.customFormats),this.schemas={},this.unresolvedRefs=[],this.types=Object.create(q),this.attributes=Object.create(Gr.validators)};$.prototype.customFormats={};$.prototype.schemas=null;$.prototype.types=null;$.prototype.attributes=null;$.prototype.unresolvedRefs=null;$.prototype.addSchema=function(e,t){var n=this;if(!e)return null;var i=Yr(t||Qr,e),o=t||e.$id||e.id;for(var a in i.id)this.schemas[a]=i.id[a];for(var a in i.ref)this.unresolvedRefs.push(a);return this.unresolvedRefs=this.unresolvedRefs.filter(function(s){return typeof n.schemas[s]>"u"}),this.schemas[o]};$.prototype.addSubSchemaArray=function(e,t){if(Array.isArray(t))for(var n=0;n<t.length;n++)this.addSubSchema(e,t[n])};$.prototype.addSubSchemaObject=function(e,t){if(!(!t||typeof t!="object"))for(var n in t)this.addSubSchema(e,t[n])};$.prototype.setSchemas=function(e){this.schemas=e};$.prototype.getSchema=function(e){return this.schemas[e]};$.prototype.validate=function(e,t,n,i){if(typeof t!="boolean"&&typeof t!="object"||t===null)throw new he("Expected `schema` to be an object or boolean");n||(n={});var o=t.$id||t.id,a=Wr.resolve(n.base||Qr,o||"");if(!i){i=new Xr(t,n,[],a,Object.create(this.schemas)),i.schemas[a]||(i.schemas[a]=t);var s=Yr(a,t);for(var u in s.id){var l=s.id[u];i.schemas[u]=l}}if(n.required&&e===void 0){var f=new Jr(e,t,n,i);return f.addError("is required, but is undefined"),f}var f=this.validateSchema(e,t,n,i);if(f){if(n.throwAll&&f.errors.length)throw new Oo(f)}else throw new Error("Result undefined");return f};function Kr(r){var e=typeof r=="string"?r:r.$ref;return typeof e=="string"?e:!1}$.prototype.validateSchema=function(e,t,n,i){var o=new Jr(e,t,n,i);if(typeof t=="boolean")t===!0?t={}:t===!1&&(t={type:[]});else if(!t)throw new Error("schema is undefined");if(t.extends)if(Array.isArray(t.extends)){var a={schema:t,ctx:i};t.extends.forEach(this.schemaTraverser.bind(this,a)),t=a.schema,a.schema=null,a.ctx=null,a=null}else t=te.deepMerge(t,this.superResolve(t.extends,i));var s=Kr(t);if(s){var u=this.resolve(t,s,i),l=new Xr(u.subschema,n,i.path,u.switchSchema,i.schemas);return this.validateSchema(e,u.subschema,n,l)}var f=n&&n.skipAttributes||[];for(var c in t)if(!Gr.ignoreProperties[c]&&f.indexOf(c)<0){var d=null,p=this.attributes[c];if(p)d=p.call(this,e,t,n,i);else if(n.allowUnknownAttributes===!1)throw new he("Unsupported attribute: "+c,t);d&&o.importErrors(d)}if(typeof n.rewrite=="function"){var m=n.rewrite.call(this,e,t,n,i);o.instance=m}return o};$.prototype.schemaTraverser=function(e,t){e.schema=te.deepMerge(e.schema,this.superResolve(t,e.ctx))};$.prototype.superResolve=function(e,t){var n=Kr(e);return n?this.resolve(e,n,t).subschema:e};$.prototype.resolve=function(e,t,n){if(t=n.resolve(t),n.schemas[t])return{subschema:n.schemas[t],switchSchema:t};var i=Wr.parse(t),o=i&&i.hash,a=o&&o.length&&t.substr(0,t.length-o.length);if(!a||!n.schemas[a])throw new he("no such schema <"+t+">",e);var s=te.objectGetPath(n.schemas[a],o.substr(1));if(s===void 0)throw new he("no such schema "+o+" located in <"+a+">",e);return{subschema:s,switchSchema:t}};$.prototype.testType=function(e,t,n,i,o){if(o!==void 0){if(o===null)throw new he('Unexpected null in "type" keyword');if(typeof this.types[o]=="function")return this.types[o].call(this,e);if(o&&typeof o=="object"){var a=this.validateSchema(e,o,n,i);return a===void 0||!(a&&a.errors.length)}return!0}};var q=$.prototype.types={};q.string=function(e){return typeof e=="string"};q.number=function(e){return typeof e=="number"&&isFinite(e)};q.integer=function(e){return typeof e=="number"&&e%1===0};q.boolean=function(e){return typeof e=="boolean"};q.array=function(e){return Array.isArray(e)};q.null=function(e){return e===null};q.date=function(e){return e instanceof Date};q.any=function(e){return!0};q.object=function(e){return e&&typeof e=="object"&&!Array.isArray(e)&&!(e instanceof Date)};S.ValidatorResult;S.ValidatorResultError;S.ValidationError;S.SchemaError;var dt=function(r,e){return dt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])},dt(r,e)};function Le(r,e){if(typeof e!="function"&&e!==null)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");dt(r,e);function t(){this.constructor=r}r.prototype=e===null?Object.create(e):(t.prototype=e.prototype,new t)}function zo(r,e,t,n){function i(o){return o instanceof t?o:new t(function(a){a(o)})}return new(t||(t=Promise))(function(o,a){function s(f){try{l(n.next(f))}catch(c){a(c)}}function u(f){try{l(n.throw(f))}catch(c){a(c)}}function l(f){f.done?o(f.value):i(f.value).then(s,u)}l((n=n.apply(r,e||[])).next())})}function en(r,e){var t={label:0,sent:function(){if(o[0]&1)throw o[1];return o[1]},trys:[],ops:[]},n,i,o,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(l){return function(f){return u([l,f])}}function u(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(t=0)),t;)try{if(n=1,i&&(o=l[0]&2?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[l[0]&2,o.value]),l[0]){case 0:case 1:o=l;break;case 4:return t.label++,{value:l[1],done:!1};case 5:t.label++,i=l[1],l=[0];continue;case 7:l=t.ops.pop(),t.trys.pop();continue;default:if(o=t.trys,!(o=o.length>0&&o[o.length-1])&&(l[0]===6||l[0]===2)){t=0;continue}if(l[0]===3&&(!o||l[1]>o[0]&&l[1]<o[3])){t.label=l[1];break}if(l[0]===6&&t.label<o[1]){t.label=o[1],o=l;break}if(o&&t.label<o[2]){t.label=o[2],t.ops.push(l);break}o[2]&&t.ops.pop(),t.trys.pop();continue}l=e.call(r,t)}catch(f){l=[6,f],i=0}finally{n=o=0}if(l[0]&5)throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}}function ae(r){var e=typeof Symbol=="function"&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function ze(r,e){var t=typeof Symbol=="function"&&r[Symbol.iterator];if(!t)return r;var n=t.call(r),i,o=[],a;try{for(;(e===void 0||e-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(a)throw a.error}}return o}function Te(r,e,t){if(t||arguments.length===2)for(var n=0,i=e.length,o;n<i;n++)(o||!(n in e))&&(o||(o=Array.prototype.slice.call(e,0,n)),o[n]=e[n]);return r.concat(o||Array.prototype.slice.call(e))}function ne(r){return this instanceof ne?(this.v=r,this):new ne(r)}function To(r,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n=t.apply(r,e||[]),i,o=[];return i={},s("next"),s("throw"),s("return",a),i[Symbol.asyncIterator]=function(){return this},i;function a(p){return function(m){return Promise.resolve(m).then(p,c)}}function s(p,m){n[p]&&(i[p]=function(h){return new Promise(function(y,g){o.push([p,h,y,g])>1||u(p,h)})},m&&(i[p]=m(i[p])))}function u(p,m){try{l(n[p](m))}catch(h){d(o[0][3],h)}}function l(p){p.value instanceof ne?Promise.resolve(p.value.v).then(f,c):d(o[0][2],p)}function f(p){u("next",p)}function c(p){u("throw",p)}function d(p,m){p(m),o.shift(),o.length&&u(o[0][0],o[0][1])}}function Mo(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=r[Symbol.asyncIterator],t;return e?e.call(r):(r=typeof ae=="function"?ae(r):r[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(o){t[o]=r[o]&&function(a){return new Promise(function(s,u){a=r[o](a),i(s,u,a.done,a.value)})}}function i(o,a,s,u){Promise.resolve(u).then(function(l){o({value:l,done:s})},a)}}function C(r){return typeof r=="function"}function Ot(r){var e=function(n){Error.call(n),n.stack=new Error().stack},t=r(e);return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var He=Ot(function(r){return function(t){r(this),this.message=t?t.length+` errors occurred during unsubscription:
`+t.map(function(n,i){return i+1+") "+n.toString()}).join(`
  `):"",this.name="UnsubscriptionError",this.errors=t}});function pt(r,e){if(r){var t=r.indexOf(e);0<=t&&r.splice(t,1)}}var qe=function(){function r(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return r.prototype.unsubscribe=function(){var e,t,n,i,o;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var s=ae(a),u=s.next();!u.done;u=s.next()){var l=u.value;l.remove(this)}}catch(h){e={error:h}}finally{try{u&&!u.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else a.remove(this);var f=this.initialTeardown;if(C(f))try{f()}catch(h){o=h instanceof He?h.errors:[h]}var c=this._finalizers;if(c){this._finalizers=null;try{for(var d=ae(c),p=d.next();!p.done;p=d.next()){var m=p.value;try{nr(m)}catch(h){o=o??[],h instanceof He?o=Te(Te([],ze(o)),ze(h.errors)):o.push(h)}}}catch(h){n={error:h}}finally{try{p&&!p.done&&(i=d.return)&&i.call(d)}finally{if(n)throw n.error}}}if(o)throw new He(o)}},r.prototype.add=function(e){var t;if(e&&e!==this)if(this.closed)nr(e);else{if(e instanceof r){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=(t=this._finalizers)!==null&&t!==void 0?t:[]).push(e)}},r.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},r.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},r.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&pt(t,e)},r.prototype.remove=function(e){var t=this._finalizers;t&&pt(t,e),e instanceof r&&e._removeParent(this)},r.EMPTY=function(){var e=new r;return e.closed=!0,e}(),r}(),tn=qe.EMPTY;function rn(r){return r instanceof qe||r&&"closed"in r&&C(r.remove)&&C(r.add)&&C(r.unsubscribe)}function nr(r){C(r)?r():r.unsubscribe()}var nn={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},on={setTimeout:function(r,e){for(var t=[],n=2;n<arguments.length;n++)t[n-2]=arguments[n];return setTimeout.apply(void 0,Te([r,e],ze(t)))},clearTimeout:function(r){var e=on.delegate;return((e==null?void 0:e.clearTimeout)||clearTimeout)(r)},delegate:void 0};function an(r){on.setTimeout(function(){throw r})}function or(){}function Ce(r){r()}var sn=function(r){Le(e,r);function e(t){var n=r.call(this)||this;return n.isStopped=!1,t?(n.destination=t,rn(t)&&t.add(n)):n.destination=Ro,n}return e.create=function(t,n,i){return new me(t,n,i)},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,r.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(qe),Io=Function.prototype.bind;function We(r,e){return Io.call(r,e)}var jo=function(){function r(e){this.partialObserver=e}return r.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(n){ke(n)}},r.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(n){ke(n)}else ke(e)},r.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(t){ke(t)}},r}(),me=function(r){Le(e,r);function e(t,n,i){var o=r.call(this)||this,a;if(C(t)||!t)a={next:t??void 0,error:n??void 0,complete:i??void 0};else{var s;o&&nn.useDeprecatedNextContext?(s=Object.create(t),s.unsubscribe=function(){return o.unsubscribe()},a={next:t.next&&We(t.next,s),error:t.error&&We(t.error,s),complete:t.complete&&We(t.complete,s)}):a=t}return o.destination=new jo(a),o}return e}(sn);function ke(r){an(r)}function No(r){throw r}var Ro={closed:!0,next:or,error:No,complete:or},zt=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}();function Zo(r){return r}function Lo(r){return r.length===0?Zo:r.length===1?r[0]:function(t){return r.reduce(function(n,i){return i(n)},t)}}var H=function(){function r(e){e&&(this._subscribe=e)}return r.prototype.lift=function(e){var t=new r;return t.source=this,t.operator=e,t},r.prototype.subscribe=function(e,t,n){var i=this,o=Do(e)?e:new me(e,t,n);return Ce(function(){var a=i,s=a.operator,u=a.source;o.add(s?s.call(o,u):u?i._subscribe(o):i._trySubscribe(o))}),o},r.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},r.prototype.forEach=function(e,t){var n=this;return t=ir(t),new t(function(i,o){var a=new me({next:function(s){try{e(s)}catch(u){o(u),a.unsubscribe()}},error:o,complete:i});n.subscribe(a)})},r.prototype._subscribe=function(e){var t;return(t=this.source)===null||t===void 0?void 0:t.subscribe(e)},r.prototype[zt]=function(){return this},r.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Lo(e)(this)},r.prototype.toPromise=function(e){var t=this;return e=ir(e),new e(function(n,i){var o;t.subscribe(function(a){return o=a},function(a){return i(a)},function(){return n(o)})})},r.create=function(e){return new r(e)},r}();function ir(r){var e;return(e=r??nn.Promise)!==null&&e!==void 0?e:Promise}function qo(r){return r&&C(r.next)&&C(r.error)&&C(r.complete)}function Do(r){return r&&r instanceof sn||qo(r)&&rn(r)}function Uo(r){return C(r==null?void 0:r.lift)}function Vo(r){return function(e){if(Uo(e))return e.lift(function(t){try{return r(t,this)}catch(n){this.error(n)}});throw new TypeError("Unable to lift unknown Observable type")}}var Bo=Ot(function(r){return function(){r(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}),un=function(r){Le(e,r);function e(){var t=r.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return e.prototype.lift=function(t){var n=new ar(this,this);return n.operator=t,n},e.prototype._throwIfClosed=function(){if(this.closed)throw new Bo},e.prototype.next=function(t){var n=this;Ce(function(){var i,o;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var a=ae(n.currentObservers),s=a.next();!s.done;s=a.next()){var u=s.value;u.next(t)}}catch(l){i={error:l}}finally{try{s&&!s.done&&(o=a.return)&&o.call(a)}finally{if(i)throw i.error}}}})},e.prototype.error=function(t){var n=this;Ce(function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=t;for(var i=n.observers;i.length;)i.shift().error(t)}})},e.prototype.complete=function(){var t=this;Ce(function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var n=t.observers;n.length;)n.shift().complete()}})},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return((t=this.observers)===null||t===void 0?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(t){return this._throwIfClosed(),r.prototype._trySubscribe.call(this,t)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var n=this,i=this,o=i.hasError,a=i.isStopped,s=i.observers;return o||a?tn:(this.currentObservers=null,s.push(t),new qe(function(){n.currentObservers=null,pt(s,t)}))},e.prototype._checkFinalizedStatuses=function(t){var n=this,i=n.hasError,o=n.thrownError,a=n.isStopped;i?t.error(o):a&&t.complete()},e.prototype.asObservable=function(){var t=new H;return t.source=this,t},e.create=function(t,n){return new ar(t,n)},e}(H),ar=function(r){Le(e,r);function e(t,n){var i=r.call(this)||this;return i.destination=t,i.source=n,i}return e.prototype.next=function(t){var n,i;(i=(n=this.destination)===null||n===void 0?void 0:n.next)===null||i===void 0||i.call(n,t)},e.prototype.error=function(t){var n,i;(i=(n=this.destination)===null||n===void 0?void 0:n.error)===null||i===void 0||i.call(n,t)},e.prototype.complete=function(){var t,n;(n=(t=this.destination)===null||t===void 0?void 0:t.complete)===null||n===void 0||n.call(t)},e.prototype._subscribe=function(t){var n,i;return(i=(n=this.source)===null||n===void 0?void 0:n.subscribe(t))!==null&&i!==void 0?i:tn},e}(un),Ho=function(r){return r&&typeof r.length=="number"&&typeof r!="function"};function Wo(r){return C(r==null?void 0:r.then)}function Go(r){return C(r[zt])}function Yo(r){return Symbol.asyncIterator&&C(r==null?void 0:r[Symbol.asyncIterator])}function Jo(r){return new TypeError("You provided "+(r!==null&&typeof r=="object"?"an invalid object":"'"+r+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function Xo(){return typeof Symbol!="function"||!Symbol.iterator?"@@iterator":Symbol.iterator}var Qo=Xo();function Ko(r){return C(r==null?void 0:r[Qo])}function ei(r){return To(this,arguments,function(){var t,n,i,o;return en(this,function(a){switch(a.label){case 0:t=r.getReader(),a.label=1;case 1:a.trys.push([1,,9,10]),a.label=2;case 2:return[4,ne(t.read())];case 3:return n=a.sent(),i=n.value,o=n.done,o?[4,ne(void 0)]:[3,5];case 4:return[2,a.sent()];case 5:return[4,ne(i)];case 6:return[4,a.sent()];case 7:return a.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}})})}function ti(r){return C(r==null?void 0:r.getReader)}function ln(r){if(r instanceof H)return r;if(r!=null){if(Go(r))return ri(r);if(Ho(r))return ni(r);if(Wo(r))return oi(r);if(Yo(r))return cn(r);if(Ko(r))return ii(r);if(ti(r))return ai(r)}throw Jo(r)}function ri(r){return new H(function(e){var t=r[zt]();if(C(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")})}function ni(r){return new H(function(e){for(var t=0;t<r.length&&!e.closed;t++)e.next(r[t]);e.complete()})}function oi(r){return new H(function(e){r.then(function(t){e.closed||(e.next(t),e.complete())},function(t){return e.error(t)}).then(null,an)})}function ii(r){return new H(function(e){var t,n;try{for(var i=ae(r),o=i.next();!o.done;o=i.next()){var a=o.value;if(e.next(a),e.closed)return}}catch(s){t={error:s}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}e.complete()})}function cn(r){return new H(function(e){si(r,e).catch(function(t){return e.error(t)})})}function ai(r){return cn(ei(r))}function si(r,e){var t,n,i,o;return zo(this,void 0,void 0,function(){var a,s;return en(this,function(u){switch(u.label){case 0:u.trys.push([0,5,6,11]),t=Mo(r),u.label=1;case 1:return[4,t.next()];case 2:if(n=u.sent(),!!n.done)return[3,4];if(a=n.value,e.next(a),e.closed)return[2];u.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=u.sent(),i={error:s},[3,11];case 6:return u.trys.push([6,,9,10]),n&&!n.done&&(o=t.return)?[4,o.call(t)]:[3,8];case 7:u.sent(),u.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}})})}var ui=Ot(function(r){return function(){r(this),this.name="EmptyError",this.message="no elements in sequence"}});function li(r,e){var t=typeof e=="object";return new Promise(function(n,i){var o=!1,a;r.subscribe({next:function(s){a=s,o=!0},error:i,complete:function(){o?n(a):t?n(e.defaultValue):i(new ui)}})})}function ci(r){r===void 0&&(r={});var e=r.connector,t=e===void 0?function(){return new un}:e,n=r.resetOnError,i=n===void 0?!0:n,o=r.resetOnComplete,a=o===void 0?!0:o,s=r.resetOnRefCountZero,u=s===void 0?!0:s;return function(l){var f,c,d,p=0,m=!1,h=!1,y=function(){c==null||c.unsubscribe(),c=void 0},g=function(){y(),f=d=void 0,m=h=!1},w=function(){var z=f;g(),z==null||z.unsubscribe()};return Vo(function(z,T){p++,!h&&!m&&y();var D=d=d??t();T.add(function(){p--,p===0&&!h&&!m&&(c=Ge(w,u))}),D.subscribe(T),!f&&p>0&&(f=new me({next:function(R){return D.next(R)},error:function(R){h=!0,y(),c=Ge(g,i,R),D.error(R)},complete:function(){m=!0,y(),c=Ge(g,a),D.complete()}}),ln(z).subscribe(f))})(l)}}function Ge(r,e){for(var t=[],n=2;n<arguments.length;n++)t[n-2]=arguments[n];if(e===!0){r();return}if(e!==!1){var i=new me({next:function(){i.unsubscribe(),r()}});return ln(e.apply(void 0,Te([],ze(t)))).subscribe(i)}}async function fi(r,e,t,n=500){const i=`${r}://${t}${":"+e}/ws`,o=new WebSocket(i),a=new Promise(f=>{o.onclose=()=>f(void 0)}),s=new Promise((f,c)=>{const d=setTimeout(()=>{c(new Error("Connection timeout !")),o.close()},d);o.onopen=()=>{clearTimeout(d),f(void 0)},a.finally(c)}),u=new H(f=>{o.onmessage=c=>{if(c.data.startsWith("ERROR")){console.error(`SERVER ${c.data}`);return}const d=JSON.parse(c.data);f.next(d)},a.finally(()=>f.complete())}).pipe(ci());let l;return s.then(()=>(l=setInterval(()=>o.send("KEEP_ALIVE"),25e3),a)).finally(()=>clearInterval(l)),await s,{id:Math.floor(Math.random()*Math.MAX_SAFE_INTEGER),messages$:u,async send(f){await s;const c=JSON.stringify(f);o.send(c)}}}function I(r){for(var e,t,n=arguments,i=1,o="",a="",s=[0],u=function(c){i===1&&(c||(o=o.replace(/^\s*\n\s*|\s*\n\s*$/g,"")))?s.push(c?n[c]:o):i===3&&(c||o)?(s[1]=c?n[c]:o,i=2):i===2&&o==="..."&&c?s[2]=Object.assign(s[2]||{},n[c]):i===2&&o&&!c?(s[2]=s[2]||{})[o]=!0:i>=5&&(i===5?((s[2]=s[2]||{})[t]=c?o?o+n[c]:n[c]:o,i=6):(c||o)&&(s[2][t]+=c?o+n[c]:o)),o=""},l=0;l<r.length;l++){l&&(i===1&&u(),u(l));for(var f=0;f<r[l].length;f++)e=r[l][f],i===1?e==="<"?(u(),s=[s,"",null],i=3):o+=e:i===4?o==="--"&&e===">"?(i=1,o=""):o=e+o[0]:a?e===a?a="":o+=e:e==='"'||e==="'"?a=e:e===">"?(u(),i=1):i&&(e==="="?(i=5,t=o,o=""):e==="/"&&(i<5||r[l][f+1]===">")?(u(),i===3&&(s=s[0]),i=s,(s=s[0]).push(this.apply(null,i.slice(1))),i=0):e===" "||e==="	"||e===`
`||e==="\r"?(u(),i=2):o+=e),i===3&&o==="!--"&&(i=4,s=s[0])}return u(),s.length>2?s.slice(1):s[1]}var fn={exports:{}};/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */var di=function(e){var t=String.prototype.split,n=/()??/.exec("")[1]===e,i;return i=function(o,c,s){if(Object.prototype.toString.call(c)!=="[object RegExp]")return t.call(o,c,s);var u=[],l=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.extended?"x":"")+(c.sticky?"y":""),f=0,c=new RegExp(c.source,l+"g"),d,p,m,h;for(o+="",n||(d=new RegExp("^"+c.source+"$(?!\\s)",l)),s=s===e?-1>>>0:s>>>0;(p=c.exec(o))&&(m=p.index+p[0].length,!(m>f&&(u.push(o.slice(f,p.index)),!n&&p.length>1&&p[0].replace(d,function(){for(var y=1;y<arguments.length-2;y++)arguments[y]===e&&(p[y]=e)}),p.length>1&&p.index<o.length&&Array.prototype.push.apply(u,p.slice(1)),h=p[0].length,f=m,u.length>=s)));)c.lastIndex===p.index&&c.lastIndex++;return f===o.length?(h||!c.test(""))&&u.push(""):u.push(o.slice(f)),u.length>s?u.slice(0,s):u},i}(),pi=[].indexOf,hi=function(r,e){if(pi)return r.indexOf(e);for(var t=0;t<r.length;++t)if(r[t]===e)return t;return-1},Ye=hi,mi=bi;function bi(r){var e=r.classList;if(e)return e;var t={add:n,remove:i,contains:o,toggle:a,toString:s,length:0,item:u};return t;function n(c){var d=l();Ye(d,c)>-1||(d.push(c),f(d))}function i(c){var d=l(),p=Ye(d,c);p!==-1&&(d.splice(p,1),f(d))}function o(c){return Ye(l(),c)>-1}function a(c){return o(c)?(i(c),!1):(n(c),!0)}function s(){return r.className}function u(c){var d=l();return d[c]||null}function l(){var c=r.className;return vi(c.split(" "),gi)}function f(c){var d=c.length;r.className=c.join(" "),t.length=d;for(var p=0;p<c.length;p++)t[p]=c[p];delete c[d]}}function vi(r,e){for(var t=[],n=0;n<r.length;n++)e(r[n])&&t.push(r[n]);return t}function gi(r){return!!r}var yi=di,wi=mi,dn=typeof window>"u"?Re:window,le=dn.document,_i=dn.Text;function pn(){var r=[];function e(){var t=[].slice.call(arguments),n=null;function i(o){var a;function s(c){var d=yi(c,/([\.#]?[^\s#.]+)/);/^\.|#/.test(d[1])&&(n=le.createElement("div")),sr(d,function(p){var m=p.substring(1,p.length);p&&(n?p[0]==="."?wi(n).add(m):p[0]==="#"&&n.setAttribute("id",m):n=le.createElement(p))})}if(o!=null){if(typeof o=="string")n?n.appendChild(a=le.createTextNode(o)):s(o);else if(typeof o=="number"||typeof o=="boolean"||o instanceof Date||o instanceof RegExp)n.appendChild(a=le.createTextNode(o.toString()));else if(ki(o))sr(o,i);else if(Je(o))n.appendChild(a=o);else if(o instanceof _i)n.appendChild(a=o);else if(typeof o=="object")for(var u in o)if(typeof o[u]=="function")/^on\w+/.test(u)?function(c,d){n.addEventListener?(n.addEventListener(c.substring(2),d[c],!1),r.push(function(){n.removeEventListener(c.substring(2),d[c],!1)})):(n.attachEvent(c,d[c]),r.push(function(){n.detachEvent(c,d[c])}))}(u,o):(n[u]=o[u](),r.push(o[u](function(c){n[u]=c})));else if(u==="style")if(typeof o[u]=="string")n.style.cssText=o[u];else for(var l in o[u])(function(c,d){if(typeof d=="function")n.style.setProperty(c,d()),r.push(d(function(m){n.style.setProperty(c,m)}));else var p=o[u][c].match(/(.*)\W+!important\W*$/);p?n.style.setProperty(c,p[1],"important"):n.style.setProperty(c,o[u][c])})(l,o[u][l]);else if(u==="attrs")for(var f in o[u])n.setAttribute(f,o[u][f]);else u.substr(0,5)==="data-"?n.setAttribute(u,o[u]):n[u]=o[u];else if(typeof o=="function"){var f=o();n.appendChild(a=Je(f)?f:le.createTextNode(f)),r.push(o(function(d){Je(d)&&a.parentElement?(a.parentElement.replaceChild(d,a),a=d):a.textContent=d}))}}return a}for(;t.length;)i(t.shift());return n}return e.cleanup=function(){for(var t=0;t<r.length;t++)r[t]();r.length=0},e}var xi=fn.exports=pn();xi.context=pn;function Je(r){return r&&r.nodeName&&r.nodeType}function sr(r,e){if(r.forEach)return r.forEach(e);for(var t=0;t<r.length;t++)e(r[t],t)}function ki(r){return Object.prototype.toString.call(r)=="[object Array]"}var Ei=fn.exports;const j=yo(Ei);function N(r){const e=Array.isArray(r)?r:[r],t=document.createElement("template");return t.innerHTML=e.map(n=>n.outerHTML).join(""),t}function E(r){if(!r.shadowRoot)throw new Error("There is no shadow root on the element !");return r.shadowRoot}const Si=I.bind(j),Ai="polynames-background",Fi=N(Si`
	<style>

/* DEFAULT VALUES */

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

nav {
  user-select:none;
  -webkit-user-select:none;
  -moz-user-select:none;
  -ms-user-select:none;
  -o-user-select:none;
}

nav > ul,
nav > ul > li {
  outline: 0;
}

nav > ul > li > a {
 text-decoration: none;
}

.body {
  height: 100%;
  min-height: 100vh;
  background: linear-gradient(90deg, #aea4e3, #d3ffe8);
}

/* MAIN MENU */

.main-menu {
  position:fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 60px;
  overflow:hidden;
  background: #0009;
  transition: width .05s linear;
  -webkit-transition: width .05s linear;
  padding-top: 0.7vw;
}

.main-menu:hover {
  width: 180px;
  overflow:visible;
}

.main-menu > ul > li {
  position: relative;
  display: block;
  width: 180px;
}

.main-menu > ul > li > a {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  color:#999;
  font-size: 1rem;
  transition: all 0.1s linear;
  -webkit-transition: all 0.1s linear;
  padding: 0.7vw 0;
}

.nav-icon {
  width: 60px;
  height: 20px;
  font-size: 20px;
  text-align: center;
}

.nav-text {
  width: 120px;
  height: 20px;
  font-family: "Mulish", sans-serif;
}

.logout {
  position: absolute;
  left: 0;
  bottom: 0;
}

.main-menu li:hover > a, .main-menu li.active > a, .main-menu li > a:focus {
  text-decoration: none;
  color: #fff;
  background-color: rgb(29, 79, 215, 0.7);
}

/* ANIMATED BACKGROUND */

.container {
	background:#1F2024;
	height: 100%;
	overflow: hidden;
	position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

.blob-c {
	min-height: 100vh;
	overflow: hidden;
	position:absolute;
	width: 100%;
	filter: blur(3.8vw);
/*   background: rgba(255,255,255,0.1) */
}

.blob {
	background:#26C3F9;
	height: 4.2vw;
	width: 5.6vw;
	border-radius: 40% 50% 30% 40%;
  animation: transform 18s ease-in-out infinite both alternate, movement_one 12s ease-in-out infinite both;
	opacity:.7;
	position: absolute;
	left: 75%;
	top: 40%;
}

.blob.one{
	background:#0085FF;
	height: 10.4vw;
	width: 13.9vw;
	left: 0.7vw;
	top: 0.7vw;
	transform: rotate(-180deg);
	animation: transform 8s ease-in-out infinite both alternate, movement_two 20s ease-in-out infinite both;
}

.blob.two{
	background:#4EAEFF;
	height: 10.4vw;
	width: 10.4vw;
	left: 41.7vw;
	top: 17.4vw;
	transform: rotate(-180deg);
	animation: transform 10s ease-in-out infinite both alternate, movement_two 10s ease-in-out infinite both;
}

.blob.three{
	background:#0EAFFF;
	height: 10.4vw;
	width: 10.4vw;
	left: 55.6vw;
	top: 2.1vw;
	transform: rotate(-180deg);
	animation: transform 7s ease-in-out infinite both alternate, movement_two 23s ease-in-out infinite both;
}

.blob.four{
	background:#4EAEFF;
	height: 6.9vw;
	width: 6.9vw;
	left: 34.7vw;
	top: 4.2vw;
	transform: rotate(-180deg);
	animation: transform 17s ease-in-out infinite both alternate, movement_two 12s ease-in-out infinite both;
}

.blob.five{
	background:#0085FF;
	height: 6.9vw;
	width: 5.6vw;
	left: 33.3vw;
	top: 17.4vw;
	transform: rotate(-180deg);
	animation: transform 12s ease-in-out infinite both alternate, movement_two 18s ease-in-out infinite both;
}

.blob.six{
	background:#0EAFFF;
	height: 4.9vw;
	width: 6.9vw;
	left: 11.1vw;
	top: 27.8vw;
	transform: rotate(-180deg);
	animation: transform 5s ease-in-out infinite both alternate, movement_two 7s ease-in-out infinite both;
}

.blob.seven{
	background: #0085FF;
	height: 4.9vw;
	width: 6.9vw;
	left: 27.8vw;
	top: 27.8vw;
	transform: rotate(-180deg);
	animation: transform 5s ease-in-out infinite both alternate, movement_two 12s ease-in-out infinite both;
}

.blob.height{
  height: 5.6vw;
  width: 10vw;
  left: 55.6vw;
  top: 55.6vw;
  transform: rotate(-180deg);
  animation: transform 5s ease-in-out infinite both alternate, movement_one 12s ease-in-out infinite both;
}

.blob.nine {
  background: #0EAFFF;
  height: 5.6vw;
  width: 2vw;
  left: 42.6vw;
  top: 64.6vw;
  transform: rotate(-180deg);
  animation: transform 7s ease-in-out infinite both alternate, movement_two 15s ease-in-out infinite both;

}

@keyframes transform
{
    0%,
  100% { border-radius: 33% 67% 70% 30% / 30% 40% 70% 70%; } 
   20% { border-radius: 37% 63% 51% 49% / 37% 35% 35% 63%; } 
   40% { border-radius: 36% 64% 64% 36% / 64% 48% 52% 26%; } 
   60% { border-radius: 37% 63% 51% 49% / 30% 30% 70% 73%; } 
   80% { border-radius: 40% 60% 42% 58% / 51% 51% 49% 59%; } 
}

@keyframes movement_one
{
    0%,
  100% { transform: none; }
   50% { transform: translate(50%, 20%) rotateY(10deg) scale(1); }
}

@keyframes movement_two
{
    0%,
  500% { transform: none; }
   50% { transform: translate(50%, 100%) rotate(-200deg) scale(1.3);}
}


/* CARD */

section {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2.1vw;
  padding: 80px 40px 40px 80px;
}

.card {
  width: min(100%, 500px);
  background: rgba(255, 255, 255);
  border-radius: 16px;
  font-family: "Poppins", sans-serif;
}

.card > img {
  display: block;
  width: 100%;
  max-width: 500px;
  aspect-ratio: 4/3;
  object-fit: cover;
  object-position: 50% 50%;
  border-radius: 16px 16px 0 0;
  filter: contrast(70%);
  transition: all 0.6s cubic-bezier(0.43, 0.41, 0.22, 0.91);
}

.card > img:hover {
  filter: contrast(100%);
}

.card-content {
  display: flex;
  flex-direction: column;
  padding: 20px 15px 20px;
}

.card-content > p {
  margin-bottom: 0.7vw;
}

.card-content > p:nth-child(1) {
  font-size: 1rem;
  font-weight: 600;
  margin-bottom: 0.7vw;
  color: #1e40af;
}

.card-content > p:nth-child(2) {
  font-size: 0.8rem;
  font-weight: 400;
  color: #6b7280;
}

@media (max-width: 900px) {
  section {
     grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 500px) {
  section {
     grid-template-columns: repeat(1, 1fr);
  }
}
	</style>

	<div className="body">
		<div className="container">
			<div className="blob-c">
			<div className="blob"></div>
			<div className="blob one"></div>
			<div className="blob two"></div>
			<div className="blob three"></div>
			<div className="blob four"></div>
			<div className="blob five"></div>
			<div className="blob six"></div>
			<div className="blob seven"></div>
      <div className="blob height"></div>
      <div className="blob nine"></div>
		</div>
	</div>
</div>
`);class $i extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const e=E(this),t=Fi.content.cloneNode(!0);e.appendChild(t)}}customElements.define(Ai,$i);const Ci=I.bind(j),Pi="polynames-card",Oi=N(Ci`
	<style>

  :host {
    display: inline-block;
  }

.abs,
h2:after,
.cards .card figcaption,
.cards .card:after,
.news .card figcaption,
.news .card:after,
.news .article figcaption {
  position: absolute;
}
.rel,
h2,
h2 strong,
.cards .card,
.news .card,
.news .article {
  position: relative;
}
.fix {
  position: fixed;
}
.dfix {
  display: inline;
}
.dib {
  display: inline-block;
}
.db {
  display: block;
}
.dn {
  display: none;
}
.df,
.cards,
.news {
  display: flex;
}
.dif {
  display: inline-flex;
}
.dg {
  display: grid;
}
.dig {
  display: inline-grid;
}
.vm,
h2,
h2 strong,
h2 span {
  vertical-align: middle;
}
body {
  background: #24282f;
  font-family: 'Alegreya Sans';
}
.wrapper {
  padding: 15px;
  padding: 0.2vw;
  transition: opacity 0.3s;
  text-align: left;
}
h2 {
  padding: 10px;
  padding-left: 25px;
  color: #ccc;
  margin: 0;
}
h2 strong {
  z-index: 2;
  background: #24282f;
  padding: 4px 8px;
}
h2 span {
  font-size: 0.7em;
  color: #aaa;
  margin-left: 10px;
}
h2:after {
  content: '';
  z-index: 1;
  bottom: 50%;
  margin-bottom: -2px;
  height: 2px;
  left: 0;
  right: 0;
  background: #373d47;
}
.cards,
.news {
  flex-flow: row wrap;
}
.cards .card,
.news .card {
  cursor: pointer;
  margin: 20px;
  width: 180px;
  /*height: 270px;*/
  max-height: 128px;
  height: 10vw;
  min-height: 105px;
  overflow: hidden;
  box-shadow: 0 5px 10px rgba(0,0,0,0.8);
  transform-origin: center top;
  transform-style: preserve-3d;
  transform: translateZ(0);
  transition: 0.3s;
}
.cards .card img,
.news .card img {
  width: 100%;
  min-height: 100%;
}
.cards .card figcaption,
.news .card figcaption {
  bottom: 0;
  left: 0;
  right: 0;
  padding: 20px;
  padding-bottom: 10px;
  font-size: 20px;
  background: none;
  color: #fff;
  /*transform: translateY(100%);
  transition: 0.3s;*/
}
.cards .card:after,
.news .card:after {
  content: '';
  z-index: 10;
  width: 200%;
  height: 100%;
  top: -90%;
  left: -20px;
  opacity: 0.1;
  transform: rotate(45deg);
  background: linear-gradient(to top, transparent, #fff 15%, rgba(255,255,255,0.5));
  transition: 0.3s;
}
.cards .card:hover,
.news .card:hover,
.cards .card:focus,
.news .card:focus,
.cards .card:active,
.news .card:active {
  box-shadow: 0 8px 16px 3px rgba(0,0,0,0.6);
  transform: translateY(-3px) scale(1.05) rotateX(15deg);
}
.cards .card:hover figcaption,
.news .card:hover figcaption,
.cards .card:focus figcaption,
.news .card:focus figcaption,
.cards .card:active figcaption,
.news .card:active figcaption {
  transform: none;
}
.cards .card:hover:after,
.news .card:hover:after,
.cards .card:focus:after,
.news .card:focus:after,
.cards .card:active:after,
.news .card:active:after {
  transform: rotate(25deg);
  top: -40%;
  opacity: 0.15;
}
.news .article {
  overflow: hidden;
  width: 350px;
  height: 235px;
  margin: 20px;
}
.news .article img {
  width: 100%;
  min-height: 100%;
  transition: 0.2s;
}
.news .article figcaption {
  font-size: 14px;
  text-shadow: 0 1px 0 rgba(51,51,51,0.3);
  color: #fff;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  padding: 40px;
  box-shadow: 0 0 2px rgba(0,0,0,0.2);
  background: rgba(6,18,53,0.6);
  opacity: 0;
  transform: scale(1.15);
  transition: 0.2s;
}
.news .article figcaption h3 {
  color: #3792e3;
  font-size: 16px;
  margin-bottom: 0;
  font-weight: bold;
}
.news .article:hover img,
.news .article:focus img,
.news .article:active img {
  filter: blur(3px);
  transform: scale(0.97);
}
.news .article:hover figcaption,
.news .article:focus figcaption,
.news .article:active figcaption {
  opacity: 1;
  transform: none;
}

  .anton-sc-regular {
  font-family: "Anton SC", sans-serif;
  font-weight: 400;
  font-style: normal;
  font-size: 1.85rem;
  letter-spacing: -0.3px;
}

.indie-flower-regular {
  font-family: "Indie Flower", cursive;
  font-weight: 400;
  font-style: normal;
}


	</style>

    <div className="wrapper">
        <div className="cards">
            <figure className="card">
                <polynames-background-squared/>
                <figcaption>
                  <span id="kindcaption" className="indie-flower-regular"></span>
                  <br/>
                  <span id="wordcaption" className="anton-sc-regular"></span>
                </figcaption>
            </figure>
        </div>
    </div>
`);class zi extends HTMLElement{static get observedAttributes(){return["word","kind","selected","guessed"]}constructor(){super();let e=document.createElement("link");e.href="https://fonts.googleapis.com/css2?family=Anton+SC&display=swap",e.rel="stylesheet",document.head.appendChild(e),e=document.createElement("link"),e.href="https://fonts.googleapis.com/css2?family=Indie+Flower&display=swap",e.rel="stylesheet",document.head.appendChild(e)}async connectedCallback(){this.attachShadow({mode:"open"});const e=E(this),t=Oi.content.cloneNode(!0);e.appendChild(t);const n=e.querySelector("#wordcaption");n&&(n.textContent=`${this.getAttribute("word")}`);const i=e.querySelector("#kindcaption"),o=this.getAttribute("kind");i&&(i.textContent=`${ur(o)}`);const a=e.querySelector("polynames-background-squared");if(a){const f=this.getAttribute("kind");f?a.setAttribute("kind",f):a.removeAttribute("kind")}const s=e.querySelector(".card");s&&(s.style.boxShadow=this.getAttribute("selected")!==null?"rgba(56, 152, 255, 0.8) 0px 5px 50px":"0 5px 10px rgba(0,0,0,0.8)");const u=e.querySelector(".wrapper"),l=this.getAttribute("guessed")!==null;u&&l&&(u.style.opacity="0.3")}attributeChangedCallback(e,t,n){if(this.shadowRoot&&e==="word"){const o=E(this).querySelector("#wordcaption");o&&(o.textContent=`${this.getAttribute("word")}`)}if(this.shadowRoot&&e==="kind"){const i=E(this),o=i.querySelector("polynames-background-squared");o&&o.setAttribute("kind",n);const a=i.querySelector("#kindcaption");a&&(a.textContent=`${ur(n)}`)}if(this.shadowRoot){const o=E(this).querySelector(".card");o&&(o.style.boxShadow=this.getAttribute("selected")!==null?"rgba(56, 152, 255, 0.8) 0px 5px 50px":"0 5px 10px rgba(0,0,0,0.8)")}if(this.shadowRoot&&e==="guessed"){const o=E(this).querySelector(".wrapper"),a=this.getAttribute("guessed")!==null;o&&(o.style.opacity=a?"0.3":"1")}}}function ur(r){switch(r){case"Target":return"Bonne carte";case"Neutral":return"Neutre";case"Eliminatory":return"Éliminatoire";default:return"À deviner"}}customElements.define(Pi,zi);const Ti=I.bind(j),Mi="polynames-background-squared",Ii=N(Ti`
	<style>
* {
  margin: 0;
  padding: 0;
}

.banner-text {
  width: 100%;
  position: absolute;
  z-index: 1;
}
.banner-text ul {
  height: 50px;
  float: right;
}
.banner-text ul li {
  display: inline-block;
  padding: 40px 15px;
  text-transform: uppercase;
  color: #fff;
  font-size: 20px;
}
.banner-text ul li:hover {
  cursor: pointer;
}
.banner-text h2 {
  text-align: center;
  color: #fff;
  font-size: 50px;
  margin-top: 20%;
}
.animation-area {
  background: #fdc830;
  background: -webkit-linear-gradient(to right, #f37335, #fdc830);
  background: linear-gradient(to right, #f37335, #fdc830);
  width: 100%;
  height: 100vh;
}
.box-area {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}
.box-area li {
  position: absolute;
  display: block;
  list-style: none;
  width: 25px;
  height: 25px;
  background: rgba(255, 255, 255, 0.2);
  animation: animate 400s linear infinite;
  bottom: -150px;
}
.box-area li:nth-child(1) {
  left: 86%;
  width: 80px;
  height: 80px;
  animation-delay: 0s;
}
.box-area li:nth-child(2) {
  left: 12%;
  width: 30px;
  height: 30px;
  animation-delay: 1.5s;
  animation-duration: 100s;
}
.box-area li:nth-child(3) {
  left: 70%;
  width: 100px;
  height: 100px;
  animation-delay: 5.5s;
}
.box-area li:nth-child(4) {
  left: 42%;
  width: 150px;
  height: 150px;
  animation-delay: 0s;
  animation-duration: 150s;
}
.box-area li:nth-child(5) {
  left: 65%;
  width: 40px;
  height: 40px;
  animation-delay: 0s;
}
.box-area li:nth-child(6) {
  left: 15%;
  width: 110px;
  height: 110px;
  animation-delay: 3.5s;
}
@keyframes animate {
  0% {
    transform: translateY(0) rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: translateY(-800px) rotate(360deg);
    opacity: 0;
  }
}
	</style>

    <div className="animation-area">
    <ul className="box-area">
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
    </ul>
    </div>
`);class ji extends HTMLElement{static get observedAttributes(){return["kind"]}async connectedCallback(){this.attachShadow({mode:"open"});const e=E(this),t=Ii.content.cloneNode(!0);e.appendChild(t),this.render()}render(){const e=E(this),t=[".box-area li:nth-child(1)",".box-area li:nth-child(2)",".box-area li:nth-child(3)",".box-area li:nth-child(4)",".box-area li:nth-child(5)",".box-area li:nth-child(6)"];for(const i of t){const o=e.querySelector(i);if(o){o.style.animationDuration=`${Math.random()*80+40}s`,o.style.animationDelay=`${Math.random()*120}s`;const a=Math.random()*120+30;o.style.width=`${a}px`,o.style.height=`${a}px`}}const n=e.querySelector(".animation-area");if(n){const i=this.getAttribute("kind");i==="Target"?(n.style.background="#fdc830",n.style.background="-webkit-linear-gradient(to right, rgba(191, 81, 0, 0.71), rgba(253, 183, 48, 0.99))",n.style.background="linear-gradient(to right, rgba(191, 81, 0, 0.71), rgba(253, 183, 48, 0.99))"):i==="Eliminatory"?(n.style.background="#000",n.style.background="-webkit-linear-gradient(to right, rgb(28, 28, 28), rgb(47, 47, 47))",n.style.background="linear-gradient(to right, rgb(28, 28, 28), rgb(47, 47, 47))"):i==="Neutral"?(n.style.background="rgba(138, 126, 101, 0.84)",n.style.background="-webkit-linear-gradient(to right, rgba(168, 134, 53, 0.15), rgba(138, 126, 101, 0.84)",n.style.background="linear-gradient(to right, rgba(168, 134, 53, 0.15), rgba(138, 126, 101, 0.84))"):(n.style.background="rgba(31, 41, 193, 0.48)",n.style.background="-webkit-linear-gradient(to right, rgba(31, 41, 193, 0.48), rgba(48, 109, 253, 0.69))",n.style.background="linear-gradient(to right, rgba(31, 41, 193, 0.48), rgba(48, 109, 253, 0.69))")}else console.error("animation-area not found")}attributeChangedCallback(){this.shadowRoot&&this.render()}}customElements.define(Mi,ji);const Ni=I.bind(j),Ri="polynames-button",Zi=N(Ni`
	<style>
        @import url('https://fonts.googleapis.com/css?family=Space%20Grotesk:700|Space%20Grotesk:400');

.body {
  background-color: #141516;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
}

button {

  --m: 2rem;
  
  --red: #FF6565;
  --pink: #FF64F9;
  --purple: #6B5FFF;
  --blue: #4D8AFF;
  --green: #5BFF89;
  --yellow: #FFEE55;
  --orange: #FF6D1B;


  border: calc(0.08 * var(--m)) solid transparent;
  position: relative;
  color: #F3F3F3;
  font-family: 'Space Grotesk';
  font-size: var(--m);
  border-radius: calc(0.7 * var(--m));
  padding: calc(0.5 * var(--m)) calc(1 * var(--m));
  display: flex;
  justify-content: center;
  cursor: pointer;
  
  background:linear-gradient(#121213, #121213), linear-gradient(#121213 50%, rgba(18, 18, 19, 0.6) 80%, rgba(18, 18, 19, 0)),  linear-gradient(90deg, var(--orange), var(--yellow), var(--green), var(--blue), var(--purple), var(--pink), var(--red));
  background-origin: border-box;
  background-clip: padding-box, border-box, border-box;
  background-size: 200%;
  animation: animate 2s infinite linear;
}

button::before {
  content: '';
  background: linear-gradient(90deg, var(--orange), var(--yellow), var(--green), var(--blue), var(--purple), var(--pink), var(--red));
  height: 30%;
  width: 60%;
  position: absolute;
  bottom: -20%;
  z-index: -5;
  background-size: 200%;
  animation: animate 2s infinite linear;
  filter: blur(calc(0.8 * var(--m)));
}

button:hover, button:hover::before {
  animation: animate 0.5s infinite linear;
}

@keyframes animate {
  0% {background-position: 0}
  100% {background-position: 200%}
}

@media screen and (max-width: 1000px) {
  :root {
    --m: 2rem;
  }
}
	</style>

	

    <div style="padding: 4rem;">
        <button><slot></slot></button>
    </div>


`);let Li=class extends HTMLElement{async connectedCallback(){this.attachShadow({mode:"open"});const e=E(this),t=Zi.content.cloneNode(!0);e.appendChild(t)}};customElements.define(Ri,Li);const qi=I.bind(j),Di="polynames-input",Ui=N(qi`
	<style>
@import url(https://fonts.googleapis.com/css?family=Cabin:400);

.webdesigntuts-workshop {
	/*position: absolute;*/
	text-align: center;
}

.webdesigntuts-workshop:before,
.webdesigntuts-workshop:after {

}

.webdesigntuts-workshop:before {
	background: #444;
	background: linear-gradient(left, #151515, #444, #151515);
	/*top: 192px;*/
}

.webdesigntuts-workshop:after {
	background: linear-gradient(left, #151515, #000, #151515);	
	/*top: 191px;*/
}

.webdesigntuts-workshop form {
	background: #111;
	background: linear-gradient(#1b1b1b, #111);
	border: 1px solid #000;
	border-radius: 5px;
	box-shadow: inset 0 0 0 1px #272727;
	display: inline-block;
	font-size: 0px;
	margin: 150px auto 0;
	padding: 20px;
	position: relative;
	z-index: 1;
}

.webdesigntuts-workshop input {
	background: #222;	
	background: linear-gradient(#333, #222);	
	border: 1px solid #444;
	border-radius: 5px 0 0 5px;
	box-shadow: 0 2px 0 #000;
	color: #888;
	display: block;
	float: left;
	font-family: 'Cabin', helvetica, arial, sans-serif;
	font-size: 13px;
	font-weight: 400;
	height: 40px;
	margin: 0;
	padding: 0 10px;
	text-shadow: 0 -1px 0 #000;
	width: 200px;
}

.ie .webdesigntuts-workshop input {
	line-height: 40px;
}

.webdesigntuts-workshop input::-webkit-input-placeholder {
   color: #888;
}

.webdesigntuts-workshop input:-moz-placeholder {
   color: #888;
}

.webdesigntuts-workshop input:focus {
	animation: glow 800ms ease-out infinite alternate;
	background: #222922;
	background: linear-gradient(#333933, #222922);
	border-color: #393;
	box-shadow: 0 0 5px rgba(0,255,0,.2), inset 0 0 5px rgba(0,255,0,.1), 0 2px 0 #000;
	color: #efe;
	outline: none;
}

.webdesigntuts-workshop input:focus::-webkit-input-placeholder { 
	color: #efe;
}

.webdesigntuts-workshop input:focus:-moz-placeholder {
	color: #efe;
}

.webdesigntuts-workshop button {
	background: #222;
	background: linear-gradient(#333, #222);
	box-sizing: border-box;
	border: 1px solid #444;
	border-left-color: #000;
	border-radius: 0 5px 5px 0;
	box-shadow: 0 2px 0 #000;
	color: #fff;
	display: block;
	float: left;
	font-family: 'Cabin', helvetica, arial, sans-serif;
	font-size: 13px;
	font-weight: 400;
	height: 40px;
	line-height: 40px;
	margin: 0;
	padding: 0;
	position: relative;
	text-shadow: 0 -1px 0 #000;
	width: 80px;
}	

.webdesigntuts-workshop button:hover,
.webdesigntuts-workshop button:focus {
	background: #292929;
	background: linear-gradient(#393939, #292929);
	color: #5f5;
	outline: none;
}

.webdesigntuts-workshop button:active {
	background: #292929;
	background: linear-gradient(#393939, #292929);
	box-shadow: 0 1px 0 #000, inset 1px 0 1px #222;
	top: 1px;
}

@keyframes glow {
    0% {
		border-bottom-color: #393;
		/*box-shadow: 0 0 5px rgba(0,255,0,.2), inset 0 0 5px rgba(0,255,0,.1), 0 2px 0 #000;*/
    }	
    100% {
		border-bottom-color: #6f6;
		/*box-shadow: 0 0 20px rgba(0,255,0,.6), inset 0 0 10px rgba(0,255,0,.4), 0 2px 0 #000;*/
    }
}

	/* override */
	.webdesigntuts-workshop input {
		border-color: transparent;
		box-shadow: none;
		background: #ffffff0d;
		border-radius: initial;
		color: white;
		font-size: 1rem;
	}

	.webdesigntuts-workshop input:focus {
		box-shadow: none;
		background: #ffffff0d;
		border-radius: initial;
		border-top-color: transparent;
		border-right-color: transparent;
		border-left-color: transparent;
	}

	.webdesigntuts-workshop button {
		border-color: transparent;
		box-shadow: none;
		color: white;
		border-radius: initial;
		font-size: 1rem;
	}

	</style>
        <section className="webdesigntuts-workshop">
                <input id="hintinput" type="text" placeholder="Tapez un indice" style="width: 7.8rem"/>		    	
                <input id="countinput" type="text" placeholder="Nombre de mots" style="width: 8rem"/>
                <button>Search</button>
        </section>
`);class Vi extends HTMLElement{async connectedCallback(){this.attachShadow({mode:"open"});const e=E(this),t=Ui.content.cloneNode(!0);e.appendChild(t);const n=e.querySelector("#hintinput");if(!n)throw new Error("Input not found");n.addEventListener("input",a=>{const s=a.target.value;this.dispatchEvent(new CustomEvent("polynamesinput",{detail:s}))});const i=e.querySelector("#countinput");if(!i)throw new Error("Count input not found");i.addEventListener("input",a=>{const s=a.target.value;this.dispatchEvent(new CustomEvent("polynamescountinput",{detail:s}))});const o=e.querySelector("button");if(!o)throw new Error("Button not found");o.addEventListener("click",a=>{this.dispatchEvent(new CustomEvent("polynamesclickbutton"))})}}customElements.define(Di,Vi);const Bi=I.bind(j),Hi="polynames-terminal",Wi=N(Bi`
	<style>

* ############ MIXINS  ############## */
/* ############ END/MIXINS  ############## */
/* ############ COLORS  ############## */
/* ############ END/COLORS  ############## */
/* ############ TYPOGRAPHY  ############## */
h1 {
  font-family: "Black Ops One", cursive;
  font-size: 18px;
  margin: 10px;
}
@media (min-width: 768px) {
  h1 {
    font-size: 22px;
  }
}

h2 {
  font-family: "Black Ops One", cursive;
  font-size: 30px;
  margin: 10px;
}

a {
  color: #d9f2f4;
  text-decoration: none;
  transition: all 1s ease;
}
a.brackets {
  padding-bottom: 2px;
}
a.brackets::before {
  content: "[ ";
}
a.brackets::after {
  content: " ]";
}
a:hover, a:active, a:focus {
  background: #d9f2f4;
  color: black;
}

/* ############ END/TYPOGRAPHY  ############## */
/* ############ BUTTONS  ############## */
.btn {
  padding: 5px;
  margin: 5px;
  color: black;
  background: #93EDF5;
  text-decoration: none;
  text-transform: uppercase;
  text-shadow: none;
  font-weight: bold;
  border: 2px solid #93EDF5;
  -webkit-box-shadow: 0px 0px 4px 2px rgba(16, 81, 139, 0.78);
  -moz-box-shadow: 0px 0px 4px 2px rgba(16, 81, 139, 0.78);
  box-shadow: 0px 0px 4px 2px rgba(16, 81, 139, 0.78);
}
.btn:hover {
  background: transparent;
  color: #93EDF5;
  text-shadow: 0px 0px 5px rgba(0, 255, 255, 0.83);
}

/* ############ END/BUTTONS  ############## */
/* ############ BASE  ############## */
.body {
  font-size: 16px;
  font-family: "Source Code Pro", monospace;
  color: #93EDF5;
  text-shadow: 0px 0px 5px rgba(0, 255, 255, 0.83);
  /*background: #051D29;*/
  -webkit-animation: ScanLine 10s ease-in-out infinite;
  -moz-animation: ScanLine 10s ease-in-out infinite;
  animation: ScanLine 10s ease-in-out infinite;
}
@-webkit-keyframes ScanLine {
  0% {
    opacity: 0.8;
  }
  10% {
    opacity: 0.5;
  }
  20% {
    opacity: 0.9;
  }
  30% {
    opacity: 0.7;
  }
  40% {
    opacity: 0.9;
  }
  50% {
    opacity: 1;
  }
  60% {
    opacity: 0.9;
  }
  70% {
    opacity: 0.6;
  }
  80% {
    opacity: 0.9;
  }
  90% {
    opacity: 0.8;
  }
  100% {
    opacity: 0.9;
  }
}
@-moz-keyframes ScanLine {
  0% {
    opacity: 0.8;
  }
  10% {
    opacity: 0.5;
  }
  20% {
    opacity: 0.9;
  }
  30% {
    opacity: 0.7;
  }
  40% {
    opacity: 0.9;
  }
  50% {
    opacity: 1;
  }
  60% {
    opacity: 0.9;
  }
  70% {
    opacity: 0.6;
  }
  80% {
    opacity: 0.9;
  }
  90% {
    opacity: 0.8;
  }
  100% {
    opacity: 0.9;
  }
}
@keyframes ScanLine {
  0% {
    opacity: 0.8;
  }
  10% {
    opacity: 0.5;
  }
  20% {
    opacity: 0.9;
  }
  30% {
    opacity: 0.7;
  }
  40% {
    opacity: 0.9;
  }
  50% {
    opacity: 1;
  }
  60% {
    opacity: 0.9;
  }
  70% {
    opacity: 0.6;
  }
  80% {
    opacity: 0.9;
  }
  90% {
    opacity: 0.8;
  }
  100% {
    opacity: 0.9;
  }
}
@media (min-width: 769px) {
  body {
    background: #051D29 url("https://markostefanovic.github.io/random-quote-generator/images/back.png") repeat 300% 300%;
    -webkit-animation: ScanLine 10s ease-in-out infinite;
    -moz-animation: ScanLine 10s ease-in-out infinite;
    animation: ScanLine 10s ease-in-out infinite;
  }
  @-webkit-keyframes ScanLine {
    0% {
      background-position: 51% 0%;
      opacity: 0.9;
    }
    10% {
      opacity: 0.8;
    }
    20% {
      opacity: 0.7;
    }
    30% {
      opacity: 0.8;
    }
    40% {
      opacity: 0.9;
    }
    50% {
      background-position: 50% 100%;
      opacity: 1;
    }
    60% {
      opacity: 0.9;
    }
    70% {
      opacity: 0.6;
    }
    80% {
      opacity: 0.9;
    }
    90% {
      opacity: 0.8;
    }
    100% {
      background-position: 51% 0%;
      opacity: 0.9;
    }
  }
  @-moz-keyframes ScanLine {
    0% {
      background-position: 51% 0%;
      opacity: 0.9;
    }
    10% {
      opacity: 0.8;
    }
    20% {
      opacity: 0.7;
    }
    30% {
      opacity: 0.8;
    }
    40% {
      opacity: 0.9;
    }
    50% {
      background-position: 50% 100%;
      opacity: 1;
    }
    60% {
      opacity: 0.9;
    }
    70% {
      opacity: 0.6;
    }
    80% {
      opacity: 0.9;
    }
    90% {
      opacity: 0.8;
    }
    100% {
      background-position: 51% 0%;
      opacity: 0.9;
    }
  }
  @keyframes ScanLine {
    0% {
      background-position: 51% 0%;
      opacity: 0.9;
    }
    10% {
      opacity: 0.8;
    }
    20% {
      opacity: 0.7;
    }
    30% {
      opacity: 0.8;
    }
    40% {
      opacity: 0.9;
    }
    50% {
      background-position: 50% 100%;
      opacity: 1;
    }
    60% {
      opacity: 0.9;
    }
    70% {
      opacity: 0.6;
    }
    80% {
      opacity: 0.9;
    }
    90% {
      opacity: 0.8;
    }
    100% {
      background-position: 51% 0%;
      opacity: 0.9;
    }
  }
}

.border.blue {
  border: 2px solid #4BA0E3;
  -webkit-box-shadow: 0px 0px 4px 2px rgba(16, 81, 139, 0.78), inset 0px 0px 4px 2px rgba(16, 81, 139, 0.78);
  -moz-box-shadow: 0px 0px 4px 2px rgba(16, 81, 139, 0.78), inset 0px 0px 4px 2px rgba(16, 81, 139, 0.78);
  box-shadow: 0px 0px 4px 2px rgba(16, 81, 139, 0.78), inset 0px 0px 4px 2px rgba(16, 81, 139, 0.78);
}
.border.red {
  border: 2px solid #D4AFB9;
  -webkit-box-shadow: 0px 0px 2px 1px rgba(240, 93, 94, 0.78);
  -moz-box-shadow: 0px 0px 2px 1px rgba(240, 93, 94, 0.78);
  box-shadow: 0px 0px 2px 1px rgba(240, 93, 94, 0.78);
}

.cursor {
  color: #93EDF5;
  background: transparent;
  text-shadow: 0px 0px 5px rgba(0, 255, 255, 0.83);
  -webkit-animation: Blink 2s ease infinite;
  -moz-animation: Blink 2s ease infinite;
  animation: Blink 2s ease infinite;
}
@-webkit-keyframes Blink {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
@-moz-keyframes Blink {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
@keyframes Blink {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

.float-left {
  /*float: left;*/
}

.clear {
  clear: both;
}

/* ############ END/BASE  ############## */
/* ############ CONTAINER  ############## */
.container {
  max-width: 800px;
  margin: 0 auto;
  min-width: 300px;
}
.container .wrapper {
  padding: 2px;
  -webkit-animation: Glitch 10s ease-in-out infinite;
  -moz-animation: Glitch 10s ease-in-out infinite;
  animation: Glitch 10s ease-in-out infinite;
}
@-webkit-keyframes Glitch {
  9.9% {
    -webkit-transform: skew(0deg);
  }
  10% {
    -webkit-transform: skew(1deg);
  }
  10.1% {
    -webkit-transform: skew(0deg);
  }
  89.9% {
    -webkit-transform: skew(0deg);
  }
  90% {
    -webkit-transform: skew(-4deg);
  }
  90.1% {
    -webkit-transform: skew(0deg);
  }
}
@-moz-keyframes Glitch {
  9.9% {
    -webkit-transform: skew(0deg);
  }
  10% {
    -webkit-transform: skew(1deg);
  }
  10.1% {
    -webkit-transform: skew(0deg);
  }
  89.9% {
    -webkit-transform: skew(0deg);
  }
  90% {
    -webkit-transform: skew(-4deg);
  }
  90.1% {
    -webkit-transform: skew(0deg);
  }
}
@keyframes Glitch {
  9.9% {
    -webkit-transform: skew(0deg);
  }
  10% {
    -webkit-transform: skew(1deg);
  }
  10.1% {
    -webkit-transform: skew(0deg);
  }
  89.9% {
    -webkit-transform: skew(0deg);
  }
  90% {
    -webkit-transform: skew(-4deg);
  }
  90.1% {
    -webkit-transform: skew(0deg);
  }
}

/* ############ END/CONTAINER  ############## */
/* ############ QUOTE - MACHINE  ############## */
.quote-machine {
  /*float: left;*/
  margin: 5px;
  width: 95vw;
}
@media (min-width: 768px) {
  .quote-machine {
    width: 600px;
  }
}

header {
  margin-bottom: 2px;
  min-height: 50px;
  position: relative;
}
header span {
  position: absolute;
  right: 5px;
  bottom: 5px;
}

main {
  margin-bottom: 2px;
  padding: 5px;
  position: relative;
  /*min-height: 300px;*/
}
@media (max-width: 767px) and (orientation: landscape) {
  main {
    min-height: 170px;
  }
}
main blockquote {
  position: relative;
  /*min-height: 130px;*/
  margin: 10px;
}
main blockquote .author {
  margin-top: 10px;
  float: right;
}
main blockquote .warning {
  padding-top: 10px;
  text-align: center;
}
main blockquote .warning > span {
  color: black;
  background: #D4AFB9;
  font-weight: bold;
  text-transform: uppercase;
  text-shadow: none;
}
main .block {
  position: absolute;
  bottom: 15px;
}

.page-author {
  text-align: center;
}

footer {
  padding-top: 5px;
}

/* ############ END/QUOTE - MACHINE  ############## */
/* ############ MEMORY MODULE  ############## */
.mem {
  width: 105px;
  margin: 5px;
  padding: 2px;
  /*float: left;*/
}
.mem ul {
  padding-left: 2px;
  padding-top: 2px;
}
.mem ul li {
  list-style: none;
  display: inline-block;
  margin: -4px;
}
.mem .module {
  margin: 3px;
  width: 6px;
  height: 16px;
  display: inline-block;
  background: #93EDF5;
  border: 2px solid #93EDF5;
  -webkit-box-shadow: 0px 0px 2px 1px rgba(0, 255, 255, 0.83);
  -moz-box-shadow: 0px 0px 2px 1px rgba(0, 255, 255, 0.83);
  box-shadow: 0px 0px 2px 1px rgba(0, 255, 255, 0.83);
}
.mem header {
  margin: 5px 5px 5px 0;
  min-height: 20px;
}
.mem header h2 {
  font-size: 30px;
  margin: 5px;
}
.mem .cell {
  float: left;
}
.mem .opened {
  color: #D4AFB9;
  text-shadow: 0px 0px 5px rgba(240, 93, 94, 0.78);
}
.mem .opened .module {
  transition: background 2s, border 2s;
  background: #D4AFB9;
  border: 2px solid #D4AFB9;
  -webkit-box-shadow: 0px 0px 2px 1px rgba(240, 93, 94, 0.78);
  -moz-box-shadow: 0px 0px 2px 1px rgba(240, 93, 94, 0.78);
  box-shadow: 0px 0px 2px 1px rgba(240, 93, 94, 0.78);
}

/* ############ END/MEMORY MODULE  ############## */

	</style>

<div className="body">
<div className="container">
    <!-- random quote machine -->
    <div className="wrapper quote-machine border blue">
      <header className="border blue">
        <h1 id="titleprop"></h1>
        <span className="version border blue">ver:1.1</span>
      </header>
      <main className="border blue">
        <blockquote id="quote"><slot></slot></blockquote>
      </main>
      <footer className="border blue">
        <p id="footerprop" className="page-author"></p>
      </footer>
    </div>

</div>
</div>
`);class Gi extends HTMLElement{static get observedAttributes(){return["title","footer"]}async connectedCallback(){this.attachShadow({mode:"open"});const e=E(this),t=Wi.content.cloneNode(!0);e.appendChild(t);const n=e.getElementById("titleprop");this.hasAttribute("title")&&(n.textContent=this.getAttribute("title")||"");const i=e.getElementById("footerprop");this.hasAttribute("footer")&&(i.textContent=this.getAttribute("footer")||"")}attributeChangedCallback(e,t,n){if(e==="title"&&this.shadowRoot){const o=E(this).getElementById("titleprop");o.textContent=n||""}if(e==="footer"&&this.shadowRoot){const o=E(this).getElementById("footerprop");o.textContent=n||""}}}customElements.define(Hi,Gi);const Yi=I.bind(j),Ji="polynames-join-input",Xi=N(Yi`
	<style>
@import url(https://fonts.googleapis.com/css?family=Cabin:400);

.webdesigntuts-workshop {
	/*position: absolute;*/
	text-align: center;
    padding: 3rem;
}

.webdesigntuts-workshop:before,
.webdesigntuts-workshop:after {

}

.webdesigntuts-workshop:before {
	background: #444;
	background: linear-gradient(left, #151515, #444, #151515);
	/*top: 192px;*/
}

.webdesigntuts-workshop:after {
	background: linear-gradient(left, #151515, #000, #151515);	
	/*top: 191px;*/
}

.webdesigntuts-workshop form {
	background: #111;
	background: linear-gradient(#1b1b1b, #111);
	border: 1px solid #000;
	border-radius: 5px;
	box-shadow: inset 0 0 0 1px #272727;
	display: inline-block;
	font-size: 0px;
	margin: 150px auto 0;
	padding: 20px;
	position: relative;
	z-index: 1;
}

.webdesigntuts-workshop input {
	background: #222;	
	background: linear-gradient(#333, #222);	
	border: 1px solid #444;
	border-radius: 5px 0 0 5px;
	box-shadow: 0 2px 0 #000;
	color: #888;
	display: block;
	float: left;
	font-family: 'Cabin', helvetica, arial, sans-serif;
	font-size: 13px;
	font-weight: 400;
	height: 40px;
	margin: 0;
	padding: 0 10px;
	text-shadow: 0 -1px 0 #000;
	width: 200px;
}

.ie .webdesigntuts-workshop input {
	line-height: 40px;
}

.webdesigntuts-workshop input::-webkit-input-placeholder {
   color: #888;
}

.webdesigntuts-workshop input:-moz-placeholder {
   color: #888;
}

.webdesigntuts-workshop input:focus {
	animation: glow 800ms ease-out infinite alternate;
	background: #222922;
	background: linear-gradient(#333933, #222922);
	border-color: #393;
	box-shadow: 0 0 5px rgba(0,255,0,.2), inset 0 0 5px rgba(0,255,0,.1), 0 2px 0 #000;
	color: #efe;
	outline: none;
}

.webdesigntuts-workshop input:focus::-webkit-input-placeholder { 
	color: #efe;
}

.webdesigntuts-workshop input:focus:-moz-placeholder {
	color: #efe;
}

.webdesigntuts-workshop button {
	background: #222;
	background: linear-gradient(#333, #222);
	box-sizing: border-box;
	border: 1px solid #444;
	border-left-color: #000;
	border-radius: 0 5px 5px 0;
	box-shadow: 0 2px 0 #000;
	color: #fff;
	display: block;
	float: left;
	font-family: 'Cabin', helvetica, arial, sans-serif;
	font-size: 13px;
	font-weight: 400;
	height: 40px;
	line-height: 40px;
	margin: 0;
	padding: 0;
	position: relative;
	text-shadow: 0 -1px 0 #000;
	width: 140px;
}	

.webdesigntuts-workshop button:hover,
.webdesigntuts-workshop button:focus {
	background: #292929;
	background: linear-gradient(#393939, #292929);
	color: #5f5;
	outline: none;
}

.webdesigntuts-workshop button:active {
	background: #292929;
	background: linear-gradient(#393939, #292929);
	box-shadow: 0 1px 0 #000, inset 1px 0 1px #222;
	top: 1px;
}

@keyframes glow {
    0% {
		border-color: #393;
		/*box-shadow: 0 0 5px rgba(0,255,0,.2), inset 0 0 5px rgba(0,255,0,.1), 0 2px 0 #000;*/
    }	
    100% {
		border-color: #6f6;
		/*box-shadow: 0 0 20px rgba(0,255,0,.6), inset 0 0 10px rgba(0,255,0,.4), 0 2px 0 #000;*/
    }
}


	/* override */
	.webdesigntuts-workshop input {
		border-color: transparent;
		box-shadow: none;
		background: #ffffff0d;
		border-radius: initial;
		color: white;
		font-size: 1rem;
	}

	.webdesigntuts-workshop input:focus {
		box-shadow: none;
		background: #ffffff0d;
		border-radius: initial;
		border-top-color: transparent;
		border-right-color: transparent;
		border-left-color: transparent;
	}

	.webdesigntuts-workshop button {
		border-color: transparent;
		box-shadow: none;
		color: white;
		border-radius: initial;
		font-size: 1rem;
	}

	</style>
        <section className="webdesigntuts-workshop">
            <input id="hintinput" type="text" style="width: 11.7rem;" placeholder="Tapez un mot de passe"/>		    	
            <button style="width: 9.2rem;">Créer / Rejoindre</button>
        </section>
`);class Qi extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const e=E(this),t=Xi.content.cloneNode(!0);e.appendChild(t)}connectedCallback(){const e=E(this),t=e.querySelector("#hintinput");if(!t)throw new Error("Input not found");t.addEventListener("input",i=>{const o=i.target.value;this.dispatchEvent(new CustomEvent("polynamesinput",{detail:o}))});const n=e.querySelector("button");if(!n)throw new Error("Button not found");n.addEventListener("click",i=>{this.dispatchEvent(new CustomEvent("polynamesclickbutton"))})}}customElements.define(Ji,Qi);const Ki=I.bind(j),ea="polynames-title",ta=N(Ki`
	<style>
@import url("https://fonts.googleapis.com/css2?family=Mr+Dafoe&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Exo:wght@900&display=swap");
body, html {
  width: 100%;
  height: 100%;
  margin: 0;
  overflow: hidden;
}

.body {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  /*background: radial-gradient(rgba(118, 0, 191, 0.5) 0%, transparent 70%), linear-gradient(#0b161e 40%, #202076 70%);*/
  perspective: 700px;
  font-size: clamp(10px, 2vw, 20px);
}

.lines {
  position: fixed;
  width: 100vw;
  height: 4em;
  background: linear-gradient(rgba(89, 193, 254, 0.2) 20%, #59c1fe 40%, #59c1fe 60%, rgba(89, 193, 254, 0.2) 80%);
  background-size: 1px 0.5em;
  box-shadow: 0 0 1em rgba(89, 193, 254, 0.4);
  transform: translateY(-1em);
  left: 0;
}

h1 {
  position: relative;
  font-family: "Exo";
  font-size: 9em;
  margin: 0;
  transform: skew(-15deg);
  letter-spacing: 0.03em;
}
h1::after {
  content: "";
  position: absolute;
  top: -0.1em;
  right: 0.05em;
  width: 0.4em;
  height: 0.4em;
  background: radial-gradient(white 3%, rgba(255, 255, 255, 0.3) 15%, rgba(255, 255, 255, 0.05) 60%, transparent 80%), radial-gradient(rgba(255, 255, 255, 0.2) 50%, transparent 60%) 50% 50%/5% 100%, radial-gradient(rgba(255, 255, 255, 0.2) 50%, transparent 60%) 50% 50%/70% 5%;
  background-repeat: no-repeat;
}
h1 span:first-child {
  display: block;
  text-shadow: 0 0 0.1em #8ba2d0, 0 0 0.2em black, 0 0 5em #165ff3;
  -webkit-text-stroke: 0.06em rgba(0, 0, 0, 0.5);
}
h1 span:last-child {
  position: absolute;
  left: 0;
  top: 0;
  background-image: linear-gradient(#032d50 25%, #00a1ef 35%, white 50%, #20125f 50%, #8313e7 55%, #ff61af 75%);
  -webkit-text-stroke: 0.01em #94a0b9;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

h2 {
  font-family: "Mr Dafoe";
  margin: 0;
  font-size: 5.5em;
  margin-top: -0.9em;
  color: white;
  text-shadow: 0 0 0.05em #fff, 0 0 0.2em #fe05e1, 0 0 0.3em #fe05e1;
  transform: rotate(-7deg);
  margin-left: 10.2rem;
}

.grid {
  background: linear-gradient(transparent 65%, rgba(46, 38, 255, 0.4) 75%, #7d41e6 80%, rgba(46, 38, 255, 0.4) 85%, transparent 95%), linear-gradient(90deg, transparent 65%, rgba(46, 38, 255, 0.4) 75%, #7d41e6 80%, rgba(46, 38, 255, 0.4) 85%, transparent 95%);
  background-size: 30px 30px;
  width: 200vw;
  height: 300vh;
  position: absolute;
  bottom: -120vh;
  transform: rotateX(-100deg);
  -webkit-mask-image: linear-gradient(black, rgba(0, 0, 0, 0) 80%);
}
	</style>

    <div className="body">
    <div className="lines"></div>
    <h1>
    <span>Poly</span>
    <span>Poly</span>
    </h1>
    <h2>Names</h2>
    </div>
`);class ra extends HTMLElement{constructor(){super();let e=document.createElement("link");e.href="https://fonts.googleapis.com/css2?family=Mr+Dafoe&display=swap",e.rel="stylesheet",document.head.appendChild(e),e=document.createElement("link"),e.href="https://fonts.googleapis.com/css2?family=Exo:wght@900&display=swap",e.rel="stylesheet",document.head.appendChild(e)}async connectedCallback(){this.attachShadow({mode:"open"});const e=E(this),t=ta.content.cloneNode(!0);e.appendChild(t)}}customElements.define(ea,ra);var ht=function(r,e){return ht=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])},ht(r,e)};function hn(r,e){if(typeof e!="function"&&e!==null)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");ht(r,e);function t(){this.constructor=r}r.prototype=e===null?Object.create(e):(t.prototype=e.prototype,new t)}function lr(r){var e=typeof Symbol=="function"&&Symbol.iterator,t=e&&r[e],n=0;if(t)return t.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function mt(r,e){var t=typeof Symbol=="function"&&r[Symbol.iterator];if(!t)return r;var n=t.call(r),i,o=[],a;try{for(;(e===void 0||e-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(a)throw a.error}}return o}function bt(r,e,t){if(t||arguments.length===2)for(var n=0,i=e.length,o;n<i;n++)(o||!(n in e))&&(o||(o=Array.prototype.slice.call(e,0,n)),o[n]=e[n]);return r.concat(o||Array.prototype.slice.call(e))}function V(r){return typeof r=="function"}function na(r){var e=function(n){Error.call(n),n.stack=new Error().stack},t=r(e);return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var Xe=na(function(r){return function(t){r(this),this.message=t?t.length+` errors occurred during unsubscription:
`+t.map(function(n,i){return i+1+") "+n.toString()}).join(`
  `):"",this.name="UnsubscriptionError",this.errors=t}});function cr(r,e){if(r){var t=r.indexOf(e);0<=t&&r.splice(t,1)}}var Tt=function(){function r(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return r.prototype.unsubscribe=function(){var e,t,n,i,o;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var s=lr(a),u=s.next();!u.done;u=s.next()){var l=u.value;l.remove(this)}}catch(h){e={error:h}}finally{try{u&&!u.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else a.remove(this);var f=this.initialTeardown;if(V(f))try{f()}catch(h){o=h instanceof Xe?h.errors:[h]}var c=this._finalizers;if(c){this._finalizers=null;try{for(var d=lr(c),p=d.next();!p.done;p=d.next()){var m=p.value;try{fr(m)}catch(h){o=o??[],h instanceof Xe?o=bt(bt([],mt(o)),mt(h.errors)):o.push(h)}}}catch(h){n={error:h}}finally{try{p&&!p.done&&(i=d.return)&&i.call(d)}finally{if(n)throw n.error}}}if(o)throw new Xe(o)}},r.prototype.add=function(e){var t;if(e&&e!==this)if(this.closed)fr(e);else{if(e instanceof r){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=(t=this._finalizers)!==null&&t!==void 0?t:[]).push(e)}},r.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},r.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},r.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&cr(t,e)},r.prototype.remove=function(e){var t=this._finalizers;t&&cr(t,e),e instanceof r&&e._removeParent(this)},r.EMPTY=function(){var e=new r;return e.closed=!0,e}(),r}();Tt.EMPTY;function mn(r){return r instanceof Tt||r&&"closed"in r&&V(r.remove)&&V(r.add)&&V(r.unsubscribe)}function fr(r){V(r)?r():r.unsubscribe()}var bn={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},vn={setTimeout:function(r,e){for(var t=[],n=2;n<arguments.length;n++)t[n-2]=arguments[n];return setTimeout.apply(void 0,bt([r,e],mt(t)))},clearTimeout:function(r){var e=vn.delegate;return((e==null?void 0:e.clearTimeout)||clearTimeout)(r)},delegate:void 0};function oa(r){vn.setTimeout(function(){throw r})}function dr(){}function ia(r){r()}var gn=function(r){hn(e,r);function e(t){var n=r.call(this)||this;return n.isStopped=!1,t?(n.destination=t,mn(t)&&t.add(n)):n.destination=la,n}return e.create=function(t,n,i){return new vt(t,n,i)},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,r.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(Tt),aa=Function.prototype.bind;function Qe(r,e){return aa.call(r,e)}var sa=function(){function r(e){this.partialObserver=e}return r.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(n){Ee(n)}},r.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(n){Ee(n)}else Ee(e)},r.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(t){Ee(t)}},r}(),vt=function(r){hn(e,r);function e(t,n,i){var o=r.call(this)||this,a;if(V(t)||!t)a={next:t??void 0,error:n??void 0,complete:i??void 0};else{var s;o&&bn.useDeprecatedNextContext?(s=Object.create(t),s.unsubscribe=function(){return o.unsubscribe()},a={next:t.next&&Qe(t.next,s),error:t.error&&Qe(t.error,s),complete:t.complete&&Qe(t.complete,s)}):a=t}return o.destination=new sa(a),o}return e}(gn);function Ee(r){oa(r)}function ua(r){throw r}var la={closed:!0,next:dr,error:ua,complete:dr},ca=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}();function fa(r){return r}function da(r){return r.length===0?fa:r.length===1?r[0]:function(t){return r.reduce(function(n,i){return i(n)},t)}}var pa=function(){function r(e){e&&(this._subscribe=e)}return r.prototype.lift=function(e){var t=new r;return t.source=this,t.operator=e,t},r.prototype.subscribe=function(e,t,n){var i=this,o=ma(e)?e:new vt(e,t,n);return ia(function(){var a=i,s=a.operator,u=a.source;o.add(s?s.call(o,u):u?i._subscribe(o):i._trySubscribe(o))}),o},r.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},r.prototype.forEach=function(e,t){var n=this;return t=pr(t),new t(function(i,o){var a=new vt({next:function(s){try{e(s)}catch(u){o(u),a.unsubscribe()}},error:o,complete:i});n.subscribe(a)})},r.prototype._subscribe=function(e){var t;return(t=this.source)===null||t===void 0?void 0:t.subscribe(e)},r.prototype[ca]=function(){return this},r.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return da(e)(this)},r.prototype.toPromise=function(e){var t=this;return e=pr(e),new e(function(n,i){var o;t.subscribe(function(a){return o=a},function(a){return i(a)},function(){return n(o)})})},r.create=function(e){return new r(e)},r}();function pr(r){var e;return(e=r??bn.Promise)!==null&&e!==void 0?e:Promise}function ha(r){return r&&V(r.next)&&V(r.error)&&V(r.complete)}function ma(r){return r&&r instanceof gn||ha(r)&&mn(r)}const ba=I.bind(j),va="polynames-instruction",ga=N(ba`
	<style>
html,
body {
  background: #212121;
  height: 100%;

}
.container {
  justify-content: center;
  align-items: center;
  display: flex;
  font-family: "Mochiy Pop One", sans-serif;
  font-family: "Viga", sans-serif;
  /*font-family: "Chakra Petch", sans-serif;*/
  font-weight: 100;
  font-style: normal;
  padding: 2rem;

}
.text {
  font-weight: 100;
  font-size: 28px;
  color: #fafafa;
  text-shadow: 1px 1px 2px black;
}

@keyframes glow {
  0%, 100% {
    text-shadow: 0 3px 0px rgba(0, 0, 0, 0.3), 0 3px 0px rgba(0, 0, 0, 0.3), 0 3px 0px rgba(0, 0, 0, 0.3), 0 3px 0px rgba(0, 0, 0, 0.3), 0 3px 0px rgba(0, 0, 0, 0.3), 0 3px 0px rgba(0, 0, 0, 0.3), 0 3px 0px rgba(0, 0, 0, 0.3), 0 3px 0px rgba(0, 0, 0, 0.3);
    transform: translateY(3px);
  }
  50% {
    text-shadow: 0 5px 5px rgba(0, 0, 0, 0.3), 0 5px 10px rgba(0, 0, 0, 0.3), 0 5px 15px rgba(0, 0, 0, 0.3), 0 5px 20px rgba(0, 0, 0, 0.3), 0 5px 25px rgba(0, 0, 0, 0.3), 0 5px 30px rgba(0, 0, 0, 0.3), 0 5px 35px rgba(0, 0, 0, 0.3), 0 5px 40px rgba(0, 0, 0, 0.3);
    transform: translateY(-5px);
  }
}




.glowing-text {
  color: #fff;
  text-align: center;
  animation: glow 12s cubic-bezier(.69,.17,.27,.91) infinite alternate;
}

.dud {
  color: #757575;
}

	</style>

    <div className="container">
    <div className="text glowing-text vertical-translate"></div>
    
    <div style="display: none;">
        <slot></slot>
    </div>
    </div>
`);class ya{constructor(e){Y(this,"queue",[]);Y(this,"el");Y(this,"chars");Y(this,"resolve");Y(this,"frame",0);Y(this,"frameRequest",0);this.el=e,this.chars="abcdefghijklmnopqrstuvwxyz",this.update=this.update.bind(this)}setText(e){const t=this.el.innerText,n=Math.max(t.length,e.length),i=new Promise(o=>(this.resolve=o,this.resolve));this.queue=[];for(let o=0;o<n;o++){const a=t[o]||"",s=e[o]||"",u=Math.floor(Math.random()*40),l=u+Math.floor(Math.random()*40);this.queue.push({from:a,to:s,start:u,end:l})}return cancelAnimationFrame(this.frameRequest),this.frame=0,this.update(),i}update(){var n;let e="",t=0;for(let i=0,o=this.queue.length;i<o;i++){let{from:a,to:s,start:u,end:l,char:f}=this.queue[i];this.frame>=l?(t++,e+=s):this.frame>=u?((!f||Math.random()<.28)&&(f=this.randomChar(),this.queue[i].char=f),e+=`<span class="dud">${f}</span>`):e+=a}this.el.innerHTML=e,t===this.queue.length?(n=this.resolve)==null||n.call(this,void 0):(this.frameRequest=requestAnimationFrame(this.update),this.frame++)}randomChar(){return this.chars[Math.floor(Math.random()*this.chars.length)]}}function wa(r){const e=r.querySelector("slot");if(!e)throw new Error("slot not found !");return e.assignedNodes({flatten:!0}).map(i=>i.textContent||"").filter(Boolean).join("")}function _a(r){return new pa(e=>{const t=r.querySelector("slot");if(!t)throw new Error("slot not found !");const n=t.assignedNodes({flatten:!0});for(const i of[t,...n])new MutationObserver(()=>{e.next(void 0)}).observe(i,{childList:!0,subtree:!0,characterData:!0})})}class xa extends HTMLElement{constructor(){super();const e=document.createElement("link");e.href="https://fonts.googleapis.com/css2?family=Viga&display=swap",e.rel="stylesheet",document.head.appendChild(e)}async connectedCallback(){this.attachShadow({mode:"open"});const e=E(this),t=ga.content.cloneNode(!0);if(e.appendChild(t),await this.render(),!e.querySelector("slot"))throw new Error("slot not found !");_a(e).subscribe(()=>{this.render()})}async render(){const e=E(this),t=e.querySelector(".text");if(!t)throw new Error("text not found !");await new ya(t).setText(wa(e))}}customElements.define(va,xa);const ka=I.bind(j),Ea="polynames-point",Sa=N(ka`
	<style>
		@keyframes moveUpAndFade {
			0% {
				transform: translateY(0) rotate(10deg);
				opacity: 1;
			}
			100% {
				transform: translateY(-30px) rotate(10deg);
				opacity: 0;
			}
		}

		.point-initial {
			display: none;
		}

		.fade-up {
			display: initial;
			animation: moveUpAndFade 2s forwards;
			position: absolute;
			z-index: 1;
			color: white;
			text-shadow: 
				1px 1px 2px black, 
				2px 2px 2px black, 
				3px 3px 2px black, 
				4px 4px 2px black,
				5px 5px 2px black;
			font-size: 3rem;
			font-family: Viga, sans-serif;
		}
	</style>

	<span  id="fadeUpText" className="point-initial"><slot></slot></span>
`);class Aa extends HTMLElement{static get observedAttributes(){return["x","y"]}async connectedCallback(){this.attachShadow({mode:"open"});const e=E(this),t=Sa.content.cloneNode(!0);e.appendChild(t)}render(){const t=E(this).getElementById("fadeUpText");if(!t)throw new Error("Element not found");const n=this.getAttribute("x"),i=this.getAttribute("y"),o=n?Number.parseInt(n):0,a=i?Number.parseInt(i):0;(o||a)&&(t.style.left=`${o}px`,t.style.top=`${a}px`,t.style.display="inline",t.classList.remove("fade-up"),t.offsetWidth,t.classList.add("fade-up"))}attributeChangedCallback(){this.shadowRoot&&this.render()}}customElements.define(Ea,Aa);const Fa=I.bind(j),$a="polynames-font-prefetch",Ca=N(Fa`
	<style>
	</style>

    <div style="opacity: 0.01">
        <polynames-title glossy="My Super" neon="Title !"></polynames-title>
        <polynames-instruction><span>Vous etes le Maitre des mots</span></polynames-instruction>
        <polynames-card word="voiture"></polynames-card>
        <polynames-input></polynames-input>
        <polynames-join-input></polynames-join-input>
        <polynames-point x="0" y="0">+1 Pt</polynames-point>
    </div>
`);class Pa extends HTMLElement{async connectedCallback(){this.attachShadow({mode:"open"});const e=E(this),t=Ca.content.cloneNode(!0);e.appendChild(t)}}customElements.define($a,Pa);async function Oa(){const r=document.createElement("polynames-font-prefetch"),e=document.querySelector("#fonts-prefetch-container");if(e===null)throw new Error("No font prefetch container found.");e.appendChild(r),await document.fonts.ready,e.remove()}async function za(){const r=a=>fi("wss",7822,"vps-23842e3b.vps.ovh.net",a),[e]=await Promise.all([r().catch(()=>r(5e3)),Oa()]),t=Ln(),n={connection:e,frontStateStorage:t},i=document.querySelector("#app-container");if(!i)throw new Error("No app container found !");const o=document.querySelector("#loader-container");if(!o)throw new Error("No loading container found !");vo(i,n),o.style.opacity="0",setTimeout(()=>{o.remove()},600),await li(n.connection.messages$,{defaultValue:void 0}),go(document.body),document.body.innerHTML="<span>Connexion fermée.</span>"}za().catch(r=>{document.body.innerHTML="<span>Une erreur est survenue !</span>",console.error(new Error("Error occured !",{cause:r}))});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
